-------------- Initial XTL

f() {
   31:	
   30:	x2 = 0; 
   29:	x8 = int32["zp" + 0]; 
   28:	x15 = x8 + x2; 
   27:	x1 = x2; 
   26:	int8u[x15 + 0] = x1; 
   25:	x2 = x2 + 1; 
   24:	if (x2 <s 256) goto 29 else goto 23
   23:	
   22:	
   21:	x5 = stack(0); 
   20:	x6 = int32["zp" + 0]; 
   19:	_ = memcpy size 256 align 1 (x5, x6); 
   18:	
   17:	x13 = int32["q" + 0]; 
   16:	_ = memcpy size 256 align 1 (x13, sp + 0); 
   15:	
   14:	x7 = 0; 
   13:	x9 = int32["q" + 0]; 
   12:	x4 = x9 + x7; 
   11:	x3 = int8u[x4 + 0]; 
   10:	if (x3 !=s x7) goto 9 else goto 4
    9:	x11 = "__stringlit_1" + 0; 
    8:	
    7:	
    6:	x12 = x3; 
    5:	(X12, X11, X10) = (x12, x7, x11) using x17, x16; X10 = call "printf"(X10, X11, X12); 
    4:	x7 = x7 + 1; 
    3:	if (x7 <s 256) goto 13 else goto 2
    2:	x14 = 0; 
    1:	X10 = x14; return X10
}

------------------ Unspillable variables --------------

x16 x17 

-------------- After initial register allocation

f() {
   31:	
{ }
   30:	x2{X5} = 0; 
{ x2 }
   29:	x8{X10} = int32["zp" + 0]; 
{ x2 x8 }
   28:	x15{X7} = x8{X10} + x2{X5}; 
{ x15 x2 }
   27:	x1{X5} = x2{X5}; 
{ x1 x15 x2 }
   26:	int8u[x15{X7} + 0] = x1{X5}; 
{ x2 }
   25:	x2{X5} = x2{X5} + 1; 
{ x2 }
   24:	if (x2{X5} <s 256) goto 29 else goto 23
{ x2 }
   23:	
{ }
   22:	
{ }
   21:	x5{X11} = stack(0); 
{ x5 }
   20:	x6{X14} = int32["zp" + 0]; 
{ x5 x6 }
   19:	_ = memcpy size 256 align 1 (x5{X11}, x6{X14}); 
{ }
   18:	
{ }
   17:	x13{X6} = int32["q" + 0]; 
{ x13 }
   16:	_ = memcpy size 256 align 1 (x13{X6}, sp + 0); 
{ }
   15:	
{ }
   14:	x7{X8} = 0; 
{ x7 }
   13:	x9{X6} = int32["q" + 0]; 
{ x7 x9 }
   12:	x4{X13} = x9{X6} + x7{X8}; 
{ x7 x4 }
   11:	x3{X12} = int8u[x4{X13} + 0]; 
{ x3 x7 }
   10:	if (x3{X12} !=s x7{X8}) goto 9 else goto 4
{ x3 x7 }
    9:	x11{X10} = "__stringlit_1" + 0; 
{ x3 x7 x11 }
    8:	
{ x3 x7 x11 }
    7:	
{ x3 x7 x11 }
    6:	x12{X12} = x3{X12}; 
{ x7 x11 x12 }
    5:	(X12, X11, X10) = (x12{X12}, x7{X8}, x11{X10}) using x17{X13}, x16{F0}; X10 = call "printf"(X10, X11, X12); 
{ x7 }
    4:	x7{X8} = x7{X8} + 1; 
{ x7 }
    3:	if (x7{X8} <s 256) goto 13 else goto 2
{ x7 }
    2:	x14{X10} = 0; 
{ x14 }
    1:	X10 = x14{X10}; return X10
{ }
}

-------------- Candidate allocation

f() {
   31:	
   30:	X5 = 0; 
   29:	X10 = int32["zp" + 0]; 
   28:	X7 = X10 + X5; 
   27:	
   26:	int8u[X7 + 0] = X5; 
   25:	X5 = X5 + 1; 
   24:	if (X5 <s 256) goto 29 else goto 23
   23:	
   22:	
   21:	X11 = stack(0); 
   20:	X14 = int32["zp" + 0]; 
   19:	_ = memcpy size 256 align 1 (X11, X14); 
   18:	
   17:	X6 = int32["q" + 0]; 
   16:	_ = memcpy size 256 align 1 (X6, sp + 0); 
   15:	
   14:	X8 = 0; 
   13:	X6 = int32["q" + 0]; 
   12:	X13 = X6 + X8; 
   11:	X12 = int8u[X13 + 0]; 
   10:	if (X12 !=s X8) goto 9 else goto 4
    9:	X10 = "__stringlit_1" + 0; 
    8:	
    7:	
    6:	
    5:	X11 = X8; call "printf"; 
    4:	X8 = X8 + 1; 
    3:	if (X8 <s 256) goto 13 else goto 2
    2:	X10 = 0; 
    1:	return
}

