State 0:
## Known stack suffix:
##
## LR(1) items:
prog_eof' -> . prog_eof [ # ]
## Transitions:
-- On STRUCT shift to state 1
-- On FN shift to state 61
-- On ENUM shift to state 223
-- On struct_decl shift to state 242
-- On struct_ shift to state 243
-- On prog_eof shift to state 252
-- On prog shift to state 253
-- On fn shift to state 245
-- On enum_decl shift to state 247
-- On enum shift to state 249
## Reductions:

State 1:
## Known stack suffix:
## STRUCT
## LR(1) items:
struct_ -> STRUCT . ID generic_origins origin_relations LBRACE composite_fields RBRACE [ STRUCT FN EOF ENUM ]
struct_decl -> STRUCT . ID generic_origins origin_relations SEMICOLON [ STRUCT FN EOF ENUM ]
## Transitions:
-- On ID shift to state 2
## Reductions:

State 2:
## Known stack suffix:
## STRUCT ID
## LR(1) items:
struct_ -> STRUCT ID . generic_origins origin_relations LBRACE composite_fields RBRACE [ STRUCT FN EOF ENUM ]
struct_decl -> STRUCT ID . generic_origins origin_relations SEMICOLON [ STRUCT FN EOF ENUM ]
## Transitions:
-- On LANGLE shift to state 3
-- On generic_origins shift to state 9
## Reductions:
-- On WHERE SEMICOLON LBRACE
--   reduce production generic_origins ->

State 3:
## Known stack suffix:
## LANGLE
## LR(1) items:
generic_origins -> LANGLE . generic_origins_ RANGLE [ WHERE SEMICOLON RPAREN RBRACE RANGLE LPAREN LBRACE COMMA ASSIGN ]
## Transitions:
-- On ORIGIN shift to state 4
-- On generic_origins_ shift to state 7
## Reductions:
-- On RANGLE
--   reduce production generic_origins_ ->

State 4:
## Known stack suffix:
## ORIGIN
## LR(1) items:
generic_origins_ -> ORIGIN . [ RANGLE ]
generic_origins_ -> ORIGIN . COMMA generic_origins_ [ RANGLE ]
## Transitions:
-- On COMMA shift to state 5
## Reductions:
-- On RANGLE
--   reduce production generic_origins_ -> ORIGIN

State 5:
## Known stack suffix:
## ORIGIN COMMA
## LR(1) items:
generic_origins_ -> ORIGIN COMMA . generic_origins_ [ RANGLE ]
## Transitions:
-- On ORIGIN shift to state 4
-- On generic_origins_ shift to state 6
## Reductions:
-- On RANGLE
--   reduce production generic_origins_ ->

State 6:
## Known stack suffix:
## ORIGIN COMMA generic_origins_
## LR(1) items:
generic_origins_ -> ORIGIN COMMA generic_origins_ . [ RANGLE ]
## Transitions:
## Reductions:
-- On RANGLE
--   reduce production generic_origins_ -> ORIGIN COMMA generic_origins_

State 7:
## Known stack suffix:
## LANGLE generic_origins_
## LR(1) items:
generic_origins -> LANGLE generic_origins_ . RANGLE [ WHERE SEMICOLON RPAREN RBRACE RANGLE LPAREN LBRACE COMMA ASSIGN ]
## Transitions:
-- On RANGLE shift to state 8
## Reductions:

State 8:
## Known stack suffix:
## LANGLE generic_origins_ RANGLE
## LR(1) items:
generic_origins -> LANGLE generic_origins_ RANGLE . [ WHERE SEMICOLON RPAREN RBRACE RANGLE LPAREN LBRACE COMMA ASSIGN ]
## Transitions:
## Reductions:
-- On WHERE SEMICOLON RPAREN RBRACE RANGLE LPAREN LBRACE COMMA ASSIGN
--   reduce production generic_origins -> LANGLE generic_origins_ RANGLE

State 9:
## Known stack suffix:
## STRUCT ID generic_origins
## LR(1) items:
struct_ -> STRUCT ID generic_origins . origin_relations LBRACE composite_fields RBRACE [ STRUCT FN EOF ENUM ]
struct_decl -> STRUCT ID generic_origins . origin_relations SEMICOLON [ STRUCT FN EOF ENUM ]
## Transitions:
-- On WHERE shift to state 10
-- On origin_relations shift to state 17
## Reductions:
-- On SEMICOLON LBRACE
--   reduce production origin_relations ->

State 10:
## Known stack suffix:
## WHERE
## LR(1) items:
origin_relations -> WHERE . origin_relations_ [ WHERE SEMICOLON RPAREN RBRACE RANGLE LBRACE COMMA ASSIGN ]
## Transitions:
-- On ORIGIN shift to state 11
-- On origin_relations_ shift to state 16
## Reductions:
-- On WHERE SEMICOLON RPAREN RBRACE RANGLE LBRACE COMMA ASSIGN
--   reduce production origin_relations_ ->

State 11:
## Known stack suffix:
## ORIGIN
## LR(1) items:
origin_relations_ -> ORIGIN . COLON ORIGIN [ WHERE SEMICOLON RPAREN RBRACE RANGLE LBRACE COMMA ASSIGN ]
origin_relations_ -> ORIGIN . COLON ORIGIN COMMA origin_relations_ [ WHERE SEMICOLON RPAREN RBRACE RANGLE LBRACE COMMA ASSIGN ]
## Transitions:
-- On COLON shift to state 12
## Reductions:

State 12:
## Known stack suffix:
## ORIGIN COLON
## LR(1) items:
origin_relations_ -> ORIGIN COLON . ORIGIN [ WHERE SEMICOLON RPAREN RBRACE RANGLE LBRACE COMMA ASSIGN ]
origin_relations_ -> ORIGIN COLON . ORIGIN COMMA origin_relations_ [ WHERE SEMICOLON RPAREN RBRACE RANGLE LBRACE COMMA ASSIGN ]
## Transitions:
-- On ORIGIN shift to state 13
## Reductions:

State 13:
## Known stack suffix:
## ORIGIN COLON ORIGIN
## LR(1) items:
origin_relations_ -> ORIGIN COLON ORIGIN . [ WHERE SEMICOLON RPAREN RBRACE RANGLE LBRACE COMMA ASSIGN ]
origin_relations_ -> ORIGIN COLON ORIGIN . COMMA origin_relations_ [ WHERE SEMICOLON RPAREN RBRACE RANGLE LBRACE COMMA ASSIGN ]
## Transitions:
-- On COMMA shift to state 14
## Reductions:
-- On WHERE SEMICOLON RPAREN RBRACE RANGLE LBRACE COMMA ASSIGN
--   reduce production origin_relations_ -> ORIGIN COLON ORIGIN
** Conflict on COMMA

State 14:
## Known stack suffix:
## ORIGIN COLON ORIGIN COMMA
## LR(1) items:
origin_relations_ -> ORIGIN COLON ORIGIN COMMA . origin_relations_ [ WHERE SEMICOLON RPAREN RBRACE RANGLE LBRACE COMMA ASSIGN ]
## Transitions:
-- On ORIGIN shift to state 11
-- On origin_relations_ shift to state 15
## Reductions:
-- On WHERE SEMICOLON RPAREN RBRACE RANGLE LBRACE COMMA ASSIGN
--   reduce production origin_relations_ ->

State 15:
## Known stack suffix:
## ORIGIN COLON ORIGIN COMMA origin_relations_
## LR(1) items:
origin_relations_ -> ORIGIN COLON ORIGIN COMMA origin_relations_ . [ WHERE SEMICOLON RPAREN RBRACE RANGLE LBRACE COMMA ASSIGN ]
## Transitions:
## Reductions:
-- On WHERE SEMICOLON RPAREN RBRACE RANGLE LBRACE COMMA ASSIGN
--   reduce production origin_relations_ -> ORIGIN COLON ORIGIN COMMA origin_relations_

State 16:
## Known stack suffix:
## WHERE origin_relations_
## LR(1) items:
origin_relations -> WHERE origin_relations_ . [ WHERE SEMICOLON RPAREN RBRACE RANGLE LBRACE COMMA ASSIGN ]
## Transitions:
## Reductions:
-- On WHERE SEMICOLON RPAREN RBRACE RANGLE LBRACE COMMA ASSIGN
--   reduce production origin_relations -> WHERE origin_relations_

State 17:
## Known stack suffix:
## STRUCT ID generic_origins origin_relations
## LR(1) items:
struct_ -> STRUCT ID generic_origins origin_relations . LBRACE composite_fields RBRACE [ STRUCT FN EOF ENUM ]
struct_decl -> STRUCT ID generic_origins origin_relations . SEMICOLON [ STRUCT FN EOF ENUM ]
## Transitions:
-- On SEMICOLON shift to state 18
-- On LBRACE shift to state 19
## Reductions:

State 18:
## Known stack suffix:
## STRUCT ID generic_origins origin_relations SEMICOLON
## LR(1) items:
struct_decl -> STRUCT ID generic_origins origin_relations SEMICOLON . [ STRUCT FN EOF ENUM ]
## Transitions:
## Reductions:
-- On STRUCT FN EOF ENUM
--   reduce production struct_decl -> STRUCT ID generic_origins origin_relations SEMICOLON

State 19:
## Known stack suffix:
## STRUCT ID generic_origins origin_relations LBRACE
## LR(1) items:
struct_ -> STRUCT ID generic_origins origin_relations LBRACE . composite_fields RBRACE [ STRUCT FN EOF ENUM ]
## Transitions:
-- On ID shift to state 20
-- On composite_fields shift to state 59
## Reductions:
-- On RBRACE
--   reduce production composite_fields ->

State 20:
## Known stack suffix:
## ID
## LR(1) items:
composite_fields -> ID . COLON ty [ RPAREN RBRACE ]
composite_fields -> ID . COLON ty COMMA composite_fields [ RPAREN RBRACE ]
## Transitions:
-- On COLON shift to state 21
## Reductions:

State 21:
## Known stack suffix:
## ID COLON
## LR(1) items:
composite_fields -> ID COLON . ty [ RPAREN RBRACE ]
composite_fields -> ID COLON . ty COMMA composite_fields [ RPAREN RBRACE ]
## Transitions:
-- On UINT8 shift to state 22
-- On UINT32 shift to state 23
-- On UINT16 shift to state 24
-- On REF shift to state 25
-- On LPAREN shift to state 29
-- On INT8 shift to state 31
-- On INT32 shift to state 32
-- On INT16 shift to state 33
-- On ID shift to state 34
-- On FN shift to state 36
-- On FLOAT64 shift to state 39
-- On FLOAT32 shift to state 40
-- On BOX shift to state 41
-- On BOOL shift to state 43
-- On ty shift to state 56
## Reductions:

State 22:
## Known stack suffix:
## UINT8
## LR(1) items:
ty -> UINT8 . [ WHERE SEMICOLON RPAREN RBRACE RANGLE LBRACE COMMA ASSIGN ]
## Transitions:
## Reductions:
-- On WHERE SEMICOLON RPAREN RBRACE RANGLE LBRACE COMMA ASSIGN
--   reduce production ty -> UINT8

State 23:
## Known stack suffix:
## UINT32
## LR(1) items:
ty -> UINT32 . [ WHERE SEMICOLON RPAREN RBRACE RANGLE LBRACE COMMA ASSIGN ]
## Transitions:
## Reductions:
-- On WHERE SEMICOLON RPAREN RBRACE RANGLE LBRACE COMMA ASSIGN
--   reduce production ty -> UINT32

State 24:
## Known stack suffix:
## UINT16
## LR(1) items:
ty -> UINT16 . [ WHERE SEMICOLON RPAREN RBRACE RANGLE LBRACE COMMA ASSIGN ]
## Transitions:
## Reductions:
-- On WHERE SEMICOLON RPAREN RBRACE RANGLE LBRACE COMMA ASSIGN
--   reduce production ty -> UINT16

State 25:
## Known stack suffix:
## REF
## LR(1) items:
ty -> REF . origin_opt MUT ty [ WHERE SEMICOLON RPAREN RBRACE RANGLE LBRACE COMMA ASSIGN ]
ty -> REF . origin_opt ty [ WHERE SEMICOLON RPAREN RBRACE RANGLE LBRACE COMMA ASSIGN ]
## Transitions:
-- On ORIGIN shift to state 26
-- On origin_opt shift to state 27
## Reductions:
-- On UINT8 UINT32 UINT16 REF MUT LPAREN INT8 INT32 INT16 ID FN FLOAT64 FLOAT32 BOX BOOL
--   reduce production origin_opt ->

State 26:
## Known stack suffix:
## ORIGIN
## LR(1) items:
origin_opt -> ORIGIN . [ UINT8 UINT32 UINT16 REF MUT LPAREN INT8 INT32 INT16 ID FN FLOAT64 FLOAT32 BOX BOOL ]
## Transitions:
## Reductions:
-- On UINT8 UINT32 UINT16 REF MUT LPAREN INT8 INT32 INT16 ID FN FLOAT64 FLOAT32 BOX BOOL
--   reduce production origin_opt -> ORIGIN

State 27:
## Known stack suffix:
## REF origin_opt
## LR(1) items:
ty -> REF origin_opt . MUT ty [ WHERE SEMICOLON RPAREN RBRACE RANGLE LBRACE COMMA ASSIGN ]
ty -> REF origin_opt . ty [ WHERE SEMICOLON RPAREN RBRACE RANGLE LBRACE COMMA ASSIGN ]
## Transitions:
-- On UINT8 shift to state 22
-- On UINT32 shift to state 23
-- On UINT16 shift to state 24
-- On REF shift to state 25
-- On MUT shift to state 28
-- On LPAREN shift to state 29
-- On INT8 shift to state 31
-- On INT32 shift to state 32
-- On INT16 shift to state 33
-- On ID shift to state 34
-- On FN shift to state 36
-- On FLOAT64 shift to state 39
-- On FLOAT32 shift to state 40
-- On BOX shift to state 41
-- On BOOL shift to state 43
-- On ty shift to state 55
## Reductions:

State 28:
## Known stack suffix:
## REF origin_opt MUT
## LR(1) items:
ty -> REF origin_opt MUT . ty [ WHERE SEMICOLON RPAREN RBRACE RANGLE LBRACE COMMA ASSIGN ]
## Transitions:
-- On UINT8 shift to state 22
-- On UINT32 shift to state 23
-- On UINT16 shift to state 24
-- On REF shift to state 25
-- On LPAREN shift to state 29
-- On INT8 shift to state 31
-- On INT32 shift to state 32
-- On INT16 shift to state 33
-- On ID shift to state 34
-- On FN shift to state 36
-- On FLOAT64 shift to state 39
-- On FLOAT32 shift to state 40
-- On BOX shift to state 41
-- On BOOL shift to state 43
-- On ty shift to state 54
## Reductions:

State 29:
## Known stack suffix:
## LPAREN
## LR(1) items:
ty -> LPAREN . RPAREN [ WHERE SEMICOLON RPAREN RBRACE RANGLE LBRACE COMMA ASSIGN ]
## Transitions:
-- On RPAREN shift to state 30
## Reductions:

State 30:
## Known stack suffix:
## LPAREN RPAREN
## LR(1) items:
ty -> LPAREN RPAREN . [ WHERE SEMICOLON RPAREN RBRACE RANGLE LBRACE COMMA ASSIGN ]
## Transitions:
## Reductions:
-- On WHERE SEMICOLON RPAREN RBRACE RANGLE LBRACE COMMA ASSIGN
--   reduce production ty -> LPAREN RPAREN

State 31:
## Known stack suffix:
## INT8
## LR(1) items:
ty -> INT8 . [ WHERE SEMICOLON RPAREN RBRACE RANGLE LBRACE COMMA ASSIGN ]
## Transitions:
## Reductions:
-- On WHERE SEMICOLON RPAREN RBRACE RANGLE LBRACE COMMA ASSIGN
--   reduce production ty -> INT8

State 32:
## Known stack suffix:
## INT32
## LR(1) items:
ty -> INT32 . [ WHERE SEMICOLON RPAREN RBRACE RANGLE LBRACE COMMA ASSIGN ]
## Transitions:
## Reductions:
-- On WHERE SEMICOLON RPAREN RBRACE RANGLE LBRACE COMMA ASSIGN
--   reduce production ty -> INT32

State 33:
## Known stack suffix:
## INT16
## LR(1) items:
ty -> INT16 . [ WHERE SEMICOLON RPAREN RBRACE RANGLE LBRACE COMMA ASSIGN ]
## Transitions:
## Reductions:
-- On WHERE SEMICOLON RPAREN RBRACE RANGLE LBRACE COMMA ASSIGN
--   reduce production ty -> INT16

State 34:
## Known stack suffix:
## ID
## LR(1) items:
ty -> ID . generic_origins [ WHERE SEMICOLON RPAREN RBRACE RANGLE LBRACE COMMA ASSIGN ]
## Transitions:
-- On LANGLE shift to state 3
-- On generic_origins shift to state 35
## Reductions:
-- On WHERE SEMICOLON RPAREN RBRACE RANGLE LBRACE COMMA ASSIGN
--   reduce production generic_origins ->

State 35:
## Known stack suffix:
## ID generic_origins
## LR(1) items:
ty -> ID generic_origins . [ WHERE SEMICOLON RPAREN RBRACE RANGLE LBRACE COMMA ASSIGN ]
## Transitions:
## Reductions:
-- On WHERE SEMICOLON RPAREN RBRACE RANGLE LBRACE COMMA ASSIGN
--   reduce production ty -> ID generic_origins

State 36:
## Known stack suffix:
## FN
## LR(1) items:
ty -> FN . generic_origins LPAREN params_ty RPAREN RARROW ty origin_relations [ WHERE SEMICOLON RPAREN RBRACE RANGLE LBRACE COMMA ASSIGN ]
## Transitions:
-- On LANGLE shift to state 3
-- On generic_origins shift to state 37
## Reductions:
-- On LPAREN
--   reduce production generic_origins ->

State 37:
## Known stack suffix:
## FN generic_origins
## LR(1) items:
ty -> FN generic_origins . LPAREN params_ty RPAREN RARROW ty origin_relations [ WHERE SEMICOLON RPAREN RBRACE RANGLE LBRACE COMMA ASSIGN ]
## Transitions:
-- On LPAREN shift to state 38
## Reductions:

State 38:
## Known stack suffix:
## FN generic_origins LPAREN
## LR(1) items:
ty -> FN generic_origins LPAREN . params_ty RPAREN RARROW ty origin_relations [ WHERE SEMICOLON RPAREN RBRACE RANGLE LBRACE COMMA ASSIGN ]
## Transitions:
-- On UINT8 shift to state 22
-- On UINT32 shift to state 23
-- On UINT16 shift to state 24
-- On REF shift to state 25
-- On LPAREN shift to state 29
-- On INT8 shift to state 31
-- On INT32 shift to state 32
-- On INT16 shift to state 33
-- On ID shift to state 34
-- On FN shift to state 36
-- On FLOAT64 shift to state 39
-- On FLOAT32 shift to state 40
-- On BOX shift to state 41
-- On BOOL shift to state 43
-- On ty shift to state 46
-- On params_ty shift to state 49
## Reductions:
-- On RPAREN
--   reduce production params_ty ->

State 39:
## Known stack suffix:
## FLOAT64
## LR(1) items:
ty -> FLOAT64 . [ WHERE SEMICOLON RPAREN RBRACE RANGLE LBRACE COMMA ASSIGN ]
## Transitions:
## Reductions:
-- On WHERE SEMICOLON RPAREN RBRACE RANGLE LBRACE COMMA ASSIGN
--   reduce production ty -> FLOAT64

State 40:
## Known stack suffix:
## FLOAT32
## LR(1) items:
ty -> FLOAT32 . [ WHERE SEMICOLON RPAREN RBRACE RANGLE LBRACE COMMA ASSIGN ]
## Transitions:
## Reductions:
-- On WHERE SEMICOLON RPAREN RBRACE RANGLE LBRACE COMMA ASSIGN
--   reduce production ty -> FLOAT32

State 41:
## Known stack suffix:
## BOX
## LR(1) items:
ty -> BOX . LANGLE ty RANGLE [ WHERE SEMICOLON RPAREN RBRACE RANGLE LBRACE COMMA ASSIGN ]
## Transitions:
-- On LANGLE shift to state 42
## Reductions:

State 42:
## Known stack suffix:
## BOX LANGLE
## LR(1) items:
ty -> BOX LANGLE . ty RANGLE [ WHERE SEMICOLON RPAREN RBRACE RANGLE LBRACE COMMA ASSIGN ]
## Transitions:
-- On UINT8 shift to state 22
-- On UINT32 shift to state 23
-- On UINT16 shift to state 24
-- On REF shift to state 25
-- On LPAREN shift to state 29
-- On INT8 shift to state 31
-- On INT32 shift to state 32
-- On INT16 shift to state 33
-- On ID shift to state 34
-- On FN shift to state 36
-- On FLOAT64 shift to state 39
-- On FLOAT32 shift to state 40
-- On BOX shift to state 41
-- On BOOL shift to state 43
-- On ty shift to state 44
## Reductions:

State 43:
## Known stack suffix:
## BOOL
## LR(1) items:
ty -> BOOL . [ WHERE SEMICOLON RPAREN RBRACE RANGLE LBRACE COMMA ASSIGN ]
## Transitions:
## Reductions:
-- On WHERE SEMICOLON RPAREN RBRACE RANGLE LBRACE COMMA ASSIGN
--   reduce production ty -> BOOL

State 44:
## Known stack suffix:
## BOX LANGLE ty
## LR(1) items:
ty -> BOX LANGLE ty . RANGLE [ WHERE SEMICOLON RPAREN RBRACE RANGLE LBRACE COMMA ASSIGN ]
## Transitions:
-- On RANGLE shift to state 45
## Reductions:

State 45:
## Known stack suffix:
## BOX LANGLE ty RANGLE
## LR(1) items:
ty -> BOX LANGLE ty RANGLE . [ WHERE SEMICOLON RPAREN RBRACE RANGLE LBRACE COMMA ASSIGN ]
## Transitions:
## Reductions:
-- On WHERE SEMICOLON RPAREN RBRACE RANGLE LBRACE COMMA ASSIGN
--   reduce production ty -> BOX LANGLE ty RANGLE

State 46:
## Known stack suffix:
## ty
## LR(1) items:
params_ty -> ty . [ RPAREN ]
params_ty -> ty . COMMA params_ty [ RPAREN ]
## Transitions:
-- On COMMA shift to state 47
## Reductions:
-- On RPAREN
--   reduce production params_ty -> ty

State 47:
## Known stack suffix:
## ty COMMA
## LR(1) items:
params_ty -> ty COMMA . params_ty [ RPAREN ]
## Transitions:
-- On UINT8 shift to state 22
-- On UINT32 shift to state 23
-- On UINT16 shift to state 24
-- On REF shift to state 25
-- On LPAREN shift to state 29
-- On INT8 shift to state 31
-- On INT32 shift to state 32
-- On INT16 shift to state 33
-- On ID shift to state 34
-- On FN shift to state 36
-- On FLOAT64 shift to state 39
-- On FLOAT32 shift to state 40
-- On BOX shift to state 41
-- On BOOL shift to state 43
-- On ty shift to state 46
-- On params_ty shift to state 48
## Reductions:
-- On RPAREN
--   reduce production params_ty ->

State 48:
## Known stack suffix:
## ty COMMA params_ty
## LR(1) items:
params_ty -> ty COMMA params_ty . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production params_ty -> ty COMMA params_ty

State 49:
## Known stack suffix:
## FN generic_origins LPAREN params_ty
## LR(1) items:
ty -> FN generic_origins LPAREN params_ty . RPAREN RARROW ty origin_relations [ WHERE SEMICOLON RPAREN RBRACE RANGLE LBRACE COMMA ASSIGN ]
## Transitions:
-- On RPAREN shift to state 50
## Reductions:

State 50:
## Known stack suffix:
## FN generic_origins LPAREN params_ty RPAREN
## LR(1) items:
ty -> FN generic_origins LPAREN params_ty RPAREN . RARROW ty origin_relations [ WHERE SEMICOLON RPAREN RBRACE RANGLE LBRACE COMMA ASSIGN ]
## Transitions:
-- On RARROW shift to state 51
## Reductions:

State 51:
## Known stack suffix:
## FN generic_origins LPAREN params_ty RPAREN RARROW
## LR(1) items:
ty -> FN generic_origins LPAREN params_ty RPAREN RARROW . ty origin_relations [ WHERE SEMICOLON RPAREN RBRACE RANGLE LBRACE COMMA ASSIGN ]
## Transitions:
-- On UINT8 shift to state 22
-- On UINT32 shift to state 23
-- On UINT16 shift to state 24
-- On REF shift to state 25
-- On LPAREN shift to state 29
-- On INT8 shift to state 31
-- On INT32 shift to state 32
-- On INT16 shift to state 33
-- On ID shift to state 34
-- On FN shift to state 36
-- On FLOAT64 shift to state 39
-- On FLOAT32 shift to state 40
-- On BOX shift to state 41
-- On BOOL shift to state 43
-- On ty shift to state 52
## Reductions:

State 52:
## Known stack suffix:
## FN generic_origins LPAREN params_ty RPAREN RARROW ty
## LR(1) items:
ty -> FN generic_origins LPAREN params_ty RPAREN RARROW ty . origin_relations [ WHERE SEMICOLON RPAREN RBRACE RANGLE LBRACE COMMA ASSIGN ]
## Transitions:
-- On WHERE shift to state 10
-- On origin_relations shift to state 53
## Reductions:
-- On WHERE SEMICOLON RPAREN RBRACE RANGLE LBRACE COMMA ASSIGN
--   reduce production origin_relations ->
** Conflict on WHERE

State 53:
## Known stack suffix:
## FN generic_origins LPAREN params_ty RPAREN RARROW ty origin_relations
## LR(1) items:
ty -> FN generic_origins LPAREN params_ty RPAREN RARROW ty origin_relations . [ WHERE SEMICOLON RPAREN RBRACE RANGLE LBRACE COMMA ASSIGN ]
## Transitions:
## Reductions:
-- On WHERE SEMICOLON RPAREN RBRACE RANGLE LBRACE COMMA ASSIGN
--   reduce production ty -> FN generic_origins LPAREN params_ty RPAREN RARROW ty origin_relations

State 54:
## Known stack suffix:
## REF origin_opt MUT ty
## LR(1) items:
ty -> REF origin_opt MUT ty . [ WHERE SEMICOLON RPAREN RBRACE RANGLE LBRACE COMMA ASSIGN ]
## Transitions:
## Reductions:
-- On WHERE SEMICOLON RPAREN RBRACE RANGLE LBRACE COMMA ASSIGN
--   reduce production ty -> REF origin_opt MUT ty

State 55:
## Known stack suffix:
## REF origin_opt ty
## LR(1) items:
ty -> REF origin_opt ty . [ WHERE SEMICOLON RPAREN RBRACE RANGLE LBRACE COMMA ASSIGN ]
## Transitions:
## Reductions:
-- On WHERE SEMICOLON RPAREN RBRACE RANGLE LBRACE COMMA ASSIGN
--   reduce production ty -> REF origin_opt ty

State 56:
## Known stack suffix:
## ID COLON ty
## LR(1) items:
composite_fields -> ID COLON ty . [ RPAREN RBRACE ]
composite_fields -> ID COLON ty . COMMA composite_fields [ RPAREN RBRACE ]
## Transitions:
-- On COMMA shift to state 57
## Reductions:
-- On RPAREN RBRACE
--   reduce production composite_fields -> ID COLON ty

State 57:
## Known stack suffix:
## ID COLON ty COMMA
## LR(1) items:
composite_fields -> ID COLON ty COMMA . composite_fields [ RPAREN RBRACE ]
## Transitions:
-- On ID shift to state 20
-- On composite_fields shift to state 58
## Reductions:
-- On RPAREN RBRACE
--   reduce production composite_fields ->

State 58:
## Known stack suffix:
## ID COLON ty COMMA composite_fields
## LR(1) items:
composite_fields -> ID COLON ty COMMA composite_fields . [ RPAREN RBRACE ]
## Transitions:
## Reductions:
-- On RPAREN RBRACE
--   reduce production composite_fields -> ID COLON ty COMMA composite_fields

State 59:
## Known stack suffix:
## STRUCT ID generic_origins origin_relations LBRACE composite_fields
## LR(1) items:
struct_ -> STRUCT ID generic_origins origin_relations LBRACE composite_fields . RBRACE [ STRUCT FN EOF ENUM ]
## Transitions:
-- On RBRACE shift to state 60
## Reductions:

State 60:
## Known stack suffix:
## STRUCT ID generic_origins origin_relations LBRACE composite_fields RBRACE
## LR(1) items:
struct_ -> STRUCT ID generic_origins origin_relations LBRACE composite_fields RBRACE . [ STRUCT FN EOF ENUM ]
## Transitions:
## Reductions:
-- On STRUCT FN EOF ENUM
--   reduce production struct_ -> STRUCT ID generic_origins origin_relations LBRACE composite_fields RBRACE

State 61:
## Known stack suffix:
## FN
## LR(1) items:
fn -> FN . ID generic_origins LPAREN composite_fields RPAREN origin_relations LBRACE stmt RBRACE [ STRUCT FN EOF ENUM ]
fn -> FN . ID generic_origins LPAREN composite_fields RPAREN RARROW ty origin_relations LBRACE stmt RBRACE [ STRUCT FN EOF ENUM ]
## Transitions:
-- On ID shift to state 62
## Reductions:

State 62:
## Known stack suffix:
## FN ID
## LR(1) items:
fn -> FN ID . generic_origins LPAREN composite_fields RPAREN origin_relations LBRACE stmt RBRACE [ STRUCT FN EOF ENUM ]
fn -> FN ID . generic_origins LPAREN composite_fields RPAREN RARROW ty origin_relations LBRACE stmt RBRACE [ STRUCT FN EOF ENUM ]
## Transitions:
-- On LANGLE shift to state 3
-- On generic_origins shift to state 63
## Reductions:
-- On LPAREN
--   reduce production generic_origins ->

State 63:
## Known stack suffix:
## FN ID generic_origins
## LR(1) items:
fn -> FN ID generic_origins . LPAREN composite_fields RPAREN origin_relations LBRACE stmt RBRACE [ STRUCT FN EOF ENUM ]
fn -> FN ID generic_origins . LPAREN composite_fields RPAREN RARROW ty origin_relations LBRACE stmt RBRACE [ STRUCT FN EOF ENUM ]
## Transitions:
-- On LPAREN shift to state 64
## Reductions:

State 64:
## Known stack suffix:
## FN ID generic_origins LPAREN
## LR(1) items:
fn -> FN ID generic_origins LPAREN . composite_fields RPAREN origin_relations LBRACE stmt RBRACE [ STRUCT FN EOF ENUM ]
fn -> FN ID generic_origins LPAREN . composite_fields RPAREN RARROW ty origin_relations LBRACE stmt RBRACE [ STRUCT FN EOF ENUM ]
## Transitions:
-- On ID shift to state 20
-- On composite_fields shift to state 65
## Reductions:
-- On RPAREN
--   reduce production composite_fields ->

State 65:
## Known stack suffix:
## FN ID generic_origins LPAREN composite_fields
## LR(1) items:
fn -> FN ID generic_origins LPAREN composite_fields . RPAREN origin_relations LBRACE stmt RBRACE [ STRUCT FN EOF ENUM ]
fn -> FN ID generic_origins LPAREN composite_fields . RPAREN RARROW ty origin_relations LBRACE stmt RBRACE [ STRUCT FN EOF ENUM ]
## Transitions:
-- On RPAREN shift to state 66
## Reductions:

State 66:
## Known stack suffix:
## FN ID generic_origins LPAREN composite_fields RPAREN
## LR(1) items:
fn -> FN ID generic_origins LPAREN composite_fields RPAREN . origin_relations LBRACE stmt RBRACE [ STRUCT FN EOF ENUM ]
fn -> FN ID generic_origins LPAREN composite_fields RPAREN . RARROW ty origin_relations LBRACE stmt RBRACE [ STRUCT FN EOF ENUM ]
## Transitions:
-- On WHERE shift to state 10
-- On RARROW shift to state 67
-- On origin_relations shift to state 219
## Reductions:
-- On LBRACE
--   reduce production origin_relations ->

State 67:
## Known stack suffix:
## FN ID generic_origins LPAREN composite_fields RPAREN RARROW
## LR(1) items:
fn -> FN ID generic_origins LPAREN composite_fields RPAREN RARROW . ty origin_relations LBRACE stmt RBRACE [ STRUCT FN EOF ENUM ]
## Transitions:
-- On UINT8 shift to state 22
-- On UINT32 shift to state 23
-- On UINT16 shift to state 24
-- On REF shift to state 25
-- On LPAREN shift to state 29
-- On INT8 shift to state 31
-- On INT32 shift to state 32
-- On INT16 shift to state 33
-- On ID shift to state 34
-- On FN shift to state 36
-- On FLOAT64 shift to state 39
-- On FLOAT32 shift to state 40
-- On BOX shift to state 41
-- On BOOL shift to state 43
-- On ty shift to state 68
## Reductions:

State 68:
## Known stack suffix:
## FN ID generic_origins LPAREN composite_fields RPAREN RARROW ty
## LR(1) items:
fn -> FN ID generic_origins LPAREN composite_fields RPAREN RARROW ty . origin_relations LBRACE stmt RBRACE [ STRUCT FN EOF ENUM ]
## Transitions:
-- On WHERE shift to state 10
-- On origin_relations shift to state 69
## Reductions:
-- On LBRACE
--   reduce production origin_relations ->

State 69:
## Known stack suffix:
## FN ID generic_origins LPAREN composite_fields RPAREN RARROW ty origin_relations
## LR(1) items:
fn -> FN ID generic_origins LPAREN composite_fields RPAREN RARROW ty origin_relations . LBRACE stmt RBRACE [ STRUCT FN EOF ENUM ]
## Transitions:
-- On LBRACE shift to state 70
## Reductions:

State 70:
## Known stack suffix:
## FN ID generic_origins LPAREN composite_fields RPAREN RARROW ty origin_relations LBRACE
## LR(1) items:
fn -> FN ID generic_origins LPAREN composite_fields RPAREN RARROW ty origin_relations LBRACE . stmt RBRACE [ STRUCT FN EOF ENUM ]
## Transitions:
-- On WHILE shift to state 71
-- On TRUE shift to state 72
-- On SUBS shift to state 73
-- On STR_LITERAL shift to state 74
-- On RETURN shift to state 137
-- On REF shift to state 75
-- On NOT shift to state 76
-- On MATCH shift to state 139
-- On LPAREN shift to state 77
-- On LOOP shift to state 153
-- On LET shift to state 155
-- On LBRACE shift to state 170
-- On INT shift to state 79
-- On IF shift to state 171
-- On ID shift to state 80
-- On FALSE shift to state 84
-- On CONTINUE shift to state 174
-- On BREAK shift to state 175
-- On BOX shift to state 85
-- On ASTERISK shift to state 87
-- On stmt_item shift to state 176
-- On stmt shift to state 217
-- On path_expr shift to state 88
-- On expr shift to state 179
## Reductions:
-- On SEMICOLON RBRACE
--   reduce production stmt_item ->

State 71:
## Known stack suffix:
## WHILE
## LR(1) items:
stmt -> WHILE . expr LBRACE stmt RBRACE stmt [ RBRACE ]
## Transitions:
-- On TRUE shift to state 72
-- On SUBS shift to state 73
-- On STR_LITERAL shift to state 74
-- On REF shift to state 75
-- On NOT shift to state 76
-- On LPAREN shift to state 77
-- On INT shift to state 79
-- On ID shift to state 80
-- On FALSE shift to state 84
-- On BOX shift to state 85
-- On ASTERISK shift to state 87
-- On path_expr shift to state 88
-- On expr shift to state 135
## Reductions:

State 72:
## Known stack suffix:
## TRUE
## LR(1) items:
expr -> TRUE . [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
## Transitions:
## Reductions:
-- On SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD
--   reduce production expr -> TRUE

State 73:
## Known stack suffix:
## SUBS
## LR(1) items:
expr -> SUBS . expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
## Transitions:
-- On TRUE shift to state 72
-- On SUBS shift to state 73
-- On STR_LITERAL shift to state 74
-- On REF shift to state 75
-- On NOT shift to state 76
-- On LPAREN shift to state 77
-- On INT shift to state 79
-- On ID shift to state 80
-- On FALSE shift to state 84
-- On BOX shift to state 85
-- On ASTERISK shift to state 87
-- On path_expr shift to state 88
-- On expr shift to state 134
## Reductions:

State 74:
## Known stack suffix:
## STR_LITERAL
## LR(1) items:
expr -> STR_LITERAL . [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
## Transitions:
## Reductions:
-- On SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD
--   reduce production expr -> STR_LITERAL

State 75:
## Known stack suffix:
## REF
## LR(1) items:
expr -> REF . MUT expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> REF . expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
## Transitions:
-- On TRUE shift to state 72
-- On SUBS shift to state 73
-- On STR_LITERAL shift to state 74
-- On REF shift to state 75
-- On NOT shift to state 76
-- On MUT shift to state 131
-- On LPAREN shift to state 77
-- On INT shift to state 79
-- On ID shift to state 80
-- On FALSE shift to state 84
-- On BOX shift to state 85
-- On ASTERISK shift to state 87
-- On path_expr shift to state 88
-- On expr shift to state 133
## Reductions:

State 76:
## Known stack suffix:
## NOT
## LR(1) items:
expr -> NOT . expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
## Transitions:
-- On TRUE shift to state 72
-- On SUBS shift to state 73
-- On STR_LITERAL shift to state 74
-- On REF shift to state 75
-- On NOT shift to state 76
-- On LPAREN shift to state 77
-- On INT shift to state 79
-- On ID shift to state 80
-- On FALSE shift to state 84
-- On BOX shift to state 85
-- On ASTERISK shift to state 87
-- On path_expr shift to state 88
-- On expr shift to state 130
## Reductions:

State 77:
## Known stack suffix:
## LPAREN
## LR(1) items:
expr -> LPAREN . expr RPAREN [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> LPAREN . RPAREN [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
## Transitions:
-- On TRUE shift to state 72
-- On SUBS shift to state 73
-- On STR_LITERAL shift to state 74
-- On RPAREN shift to state 78
-- On REF shift to state 75
-- On NOT shift to state 76
-- On LPAREN shift to state 77
-- On INT shift to state 79
-- On ID shift to state 80
-- On FALSE shift to state 84
-- On BOX shift to state 85
-- On ASTERISK shift to state 87
-- On path_expr shift to state 88
-- On expr shift to state 128
## Reductions:

State 78:
## Known stack suffix:
## LPAREN RPAREN
## LR(1) items:
expr -> LPAREN RPAREN . [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
## Transitions:
## Reductions:
-- On SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD
--   reduce production expr -> LPAREN RPAREN

State 79:
## Known stack suffix:
## INT
## LR(1) items:
expr -> INT . [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
## Transitions:
## Reductions:
-- On SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD
--   reduce production expr -> INT

State 80:
## Known stack suffix:
## ID
## LR(1) items:
expr -> ID . [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> ID . COLON2 ID LPAREN expr RPAREN [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
path_expr -> ID . COLON2 ID [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
## Transitions:
-- On COLON2 shift to state 81
## Reductions:
-- On SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD
--   reduce production expr -> ID

State 81:
## Known stack suffix:
## ID COLON2
## LR(1) items:
expr -> ID COLON2 . ID LPAREN expr RPAREN [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
path_expr -> ID COLON2 . ID [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
## Transitions:
-- On ID shift to state 82
## Reductions:

State 82:
## Known stack suffix:
## ID COLON2 ID
## LR(1) items:
expr -> ID COLON2 ID . LPAREN expr RPAREN [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
path_expr -> ID COLON2 ID . [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
## Transitions:
-- On LPAREN shift to state 83
## Reductions:
-- On SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD
--   reduce production path_expr -> ID COLON2 ID
** Conflict on LPAREN

State 83:
## Known stack suffix:
## ID COLON2 ID LPAREN
## LR(1) items:
expr -> ID COLON2 ID LPAREN . expr RPAREN [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
## Transitions:
-- On TRUE shift to state 72
-- On SUBS shift to state 73
-- On STR_LITERAL shift to state 74
-- On REF shift to state 75
-- On NOT shift to state 76
-- On LPAREN shift to state 77
-- On INT shift to state 79
-- On ID shift to state 80
-- On FALSE shift to state 84
-- On BOX shift to state 85
-- On ASTERISK shift to state 87
-- On path_expr shift to state 88
-- On expr shift to state 126
## Reductions:

State 84:
## Known stack suffix:
## FALSE
## LR(1) items:
expr -> FALSE . [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
## Transitions:
## Reductions:
-- On SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD
--   reduce production expr -> FALSE

State 85:
## Known stack suffix:
## BOX
## LR(1) items:
expr -> BOX . LPAREN expr RPAREN [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
## Transitions:
-- On LPAREN shift to state 86
## Reductions:

State 86:
## Known stack suffix:
## BOX LPAREN
## LR(1) items:
expr -> BOX LPAREN . expr RPAREN [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
## Transitions:
-- On TRUE shift to state 72
-- On SUBS shift to state 73
-- On STR_LITERAL shift to state 74
-- On REF shift to state 75
-- On NOT shift to state 76
-- On LPAREN shift to state 77
-- On INT shift to state 79
-- On ID shift to state 80
-- On FALSE shift to state 84
-- On BOX shift to state 85
-- On ASTERISK shift to state 87
-- On path_expr shift to state 88
-- On expr shift to state 124
## Reductions:

State 87:
## Known stack suffix:
## ASTERISK
## LR(1) items:
expr -> ASTERISK . expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
## Transitions:
-- On TRUE shift to state 72
-- On SUBS shift to state 73
-- On STR_LITERAL shift to state 74
-- On REF shift to state 75
-- On NOT shift to state 76
-- On LPAREN shift to state 77
-- On INT shift to state 79
-- On ID shift to state 80
-- On FALSE shift to state 84
-- On BOX shift to state 85
-- On ASTERISK shift to state 87
-- On path_expr shift to state 88
-- On expr shift to state 89
## Reductions:

State 88:
## Known stack suffix:
## path_expr
## LR(1) items:
expr -> path_expr . [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
## Transitions:
## Reductions:
-- On SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD
--   reduce production expr -> path_expr

State 89:
## Known stack suffix:
## ASTERISK expr
## LR(1) items:
expr -> expr . DOT ID [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> ASTERISK expr . [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . ASSIGN expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . ADD expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . SUBS expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . ASTERISK expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . DIV expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . LE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . GE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . RANGLE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . LANGLE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . EQ expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . NE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . OR expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . AND expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . LPAREN args_expr RPAREN [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
## Transitions:
-- On LPAREN shift to state 90
-- On DOT shift to state 94
## Reductions:
-- On SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LE LBRACE LANGLE GE EQ DIV COMMA ASTERISK ASSIGN AND ADD
--   reduce production expr -> ASTERISK expr

State 90:
## Known stack suffix:
## expr LPAREN
## LR(1) items:
expr -> expr LPAREN . args_expr RPAREN [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
## Transitions:
-- On TRUE shift to state 72
-- On SUBS shift to state 73
-- On STR_LITERAL shift to state 74
-- On REF shift to state 75
-- On NOT shift to state 76
-- On LPAREN shift to state 77
-- On INT shift to state 79
-- On ID shift to state 80
-- On FALSE shift to state 84
-- On BOX shift to state 85
-- On ASTERISK shift to state 87
-- On path_expr shift to state 88
-- On expr shift to state 91
-- On args_expr shift to state 122
## Reductions:
-- On RPAREN
--   reduce production args_expr ->

State 91:
## Known stack suffix:
## expr
## LR(1) items:
args_expr -> expr . [ RPAREN ]
args_expr -> expr . COMMA args_expr [ RPAREN ]
expr -> expr . DOT ID [ SUBS RPAREN RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . ASSIGN expr [ SUBS RPAREN RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . ADD expr [ SUBS RPAREN RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . SUBS expr [ SUBS RPAREN RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . ASTERISK expr [ SUBS RPAREN RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . DIV expr [ SUBS RPAREN RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . LE expr [ SUBS RPAREN RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . GE expr [ SUBS RPAREN RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . RANGLE expr [ SUBS RPAREN RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . LANGLE expr [ SUBS RPAREN RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . EQ expr [ SUBS RPAREN RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . NE expr [ SUBS RPAREN RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . OR expr [ SUBS RPAREN RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . AND expr [ SUBS RPAREN RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . LPAREN args_expr RPAREN [ SUBS RPAREN RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
## Transitions:
-- On SUBS shift to state 92
-- On RANGLE shift to state 100
-- On OR shift to state 104
-- On NE shift to state 106
-- On LPAREN shift to state 90
-- On LE shift to state 108
-- On LANGLE shift to state 110
-- On GE shift to state 112
-- On EQ shift to state 114
-- On DOT shift to state 94
-- On DIV shift to state 96
-- On COMMA shift to state 116
-- On ASTERISK shift to state 98
-- On ASSIGN shift to state 118
-- On AND shift to state 120
-- On ADD shift to state 102
## Reductions:
-- On RPAREN
--   reduce production args_expr -> expr

State 92:
## Known stack suffix:
## expr SUBS
## LR(1) items:
expr -> expr SUBS . expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
## Transitions:
-- On TRUE shift to state 72
-- On SUBS shift to state 73
-- On STR_LITERAL shift to state 74
-- On REF shift to state 75
-- On NOT shift to state 76
-- On LPAREN shift to state 77
-- On INT shift to state 79
-- On ID shift to state 80
-- On FALSE shift to state 84
-- On BOX shift to state 85
-- On ASTERISK shift to state 87
-- On path_expr shift to state 88
-- On expr shift to state 93
## Reductions:

State 93:
## Known stack suffix:
## expr SUBS expr
## LR(1) items:
expr -> expr . DOT ID [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . ASSIGN expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . ADD expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . SUBS expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr SUBS expr . [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . ASTERISK expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . DIV expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . LE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . GE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . RANGLE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . LANGLE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . EQ expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . NE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . OR expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . AND expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . LPAREN args_expr RPAREN [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
## Transitions:
-- On LPAREN shift to state 90
-- On DOT shift to state 94
-- On DIV shift to state 96
-- On ASTERISK shift to state 98
## Reductions:
-- On SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LE LBRACE LANGLE GE EQ COMMA ASSIGN AND ADD
--   reduce production expr -> expr SUBS expr

State 94:
## Known stack suffix:
## expr DOT
## LR(1) items:
expr -> expr DOT . ID [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
## Transitions:
-- On ID shift to state 95
## Reductions:

State 95:
## Known stack suffix:
## expr DOT ID
## LR(1) items:
expr -> expr DOT ID . [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
## Transitions:
## Reductions:
-- On SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD
--   reduce production expr -> expr DOT ID

State 96:
## Known stack suffix:
## expr DIV
## LR(1) items:
expr -> expr DIV . expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
## Transitions:
-- On TRUE shift to state 72
-- On SUBS shift to state 73
-- On STR_LITERAL shift to state 74
-- On REF shift to state 75
-- On NOT shift to state 76
-- On LPAREN shift to state 77
-- On INT shift to state 79
-- On ID shift to state 80
-- On FALSE shift to state 84
-- On BOX shift to state 85
-- On ASTERISK shift to state 87
-- On path_expr shift to state 88
-- On expr shift to state 97
## Reductions:

State 97:
## Known stack suffix:
## expr DIV expr
## LR(1) items:
expr -> expr . DOT ID [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . ASSIGN expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . ADD expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . SUBS expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . ASTERISK expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . DIV expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr DIV expr . [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . LE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . GE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . RANGLE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . LANGLE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . EQ expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . NE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . OR expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . AND expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . LPAREN args_expr RPAREN [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
## Transitions:
-- On LPAREN shift to state 90
-- On DOT shift to state 94
## Reductions:
-- On SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LE LBRACE LANGLE GE EQ DIV COMMA ASTERISK ASSIGN AND ADD
--   reduce production expr -> expr DIV expr

State 98:
## Known stack suffix:
## expr ASTERISK
## LR(1) items:
expr -> expr ASTERISK . expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
## Transitions:
-- On TRUE shift to state 72
-- On SUBS shift to state 73
-- On STR_LITERAL shift to state 74
-- On REF shift to state 75
-- On NOT shift to state 76
-- On LPAREN shift to state 77
-- On INT shift to state 79
-- On ID shift to state 80
-- On FALSE shift to state 84
-- On BOX shift to state 85
-- On ASTERISK shift to state 87
-- On path_expr shift to state 88
-- On expr shift to state 99
## Reductions:

State 99:
## Known stack suffix:
## expr ASTERISK expr
## LR(1) items:
expr -> expr . DOT ID [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . ASSIGN expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . ADD expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . SUBS expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . ASTERISK expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr ASTERISK expr . [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . DIV expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . LE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . GE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . RANGLE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . LANGLE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . EQ expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . NE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . OR expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . AND expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . LPAREN args_expr RPAREN [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
## Transitions:
-- On LPAREN shift to state 90
-- On DOT shift to state 94
## Reductions:
-- On SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LE LBRACE LANGLE GE EQ DIV COMMA ASTERISK ASSIGN AND ADD
--   reduce production expr -> expr ASTERISK expr

State 100:
## Known stack suffix:
## expr RANGLE
## LR(1) items:
expr -> expr RANGLE . expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
## Transitions:
-- On TRUE shift to state 72
-- On SUBS shift to state 73
-- On STR_LITERAL shift to state 74
-- On REF shift to state 75
-- On NOT shift to state 76
-- On LPAREN shift to state 77
-- On INT shift to state 79
-- On ID shift to state 80
-- On FALSE shift to state 84
-- On BOX shift to state 85
-- On ASTERISK shift to state 87
-- On path_expr shift to state 88
-- On expr shift to state 101
## Reductions:

State 101:
## Known stack suffix:
## expr RANGLE expr
## LR(1) items:
expr -> expr . DOT ID [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . ASSIGN expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . ADD expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . SUBS expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . ASTERISK expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . DIV expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . LE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . GE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . RANGLE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr RANGLE expr . [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . LANGLE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . EQ expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . NE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . OR expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . AND expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . LPAREN args_expr RPAREN [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
## Transitions:
-- On SUBS shift to state 92
-- On LPAREN shift to state 90
-- On DOT shift to state 94
-- On DIV shift to state 96
-- On ASTERISK shift to state 98
-- On ADD shift to state 102
## Reductions:
-- On SEMICOLON RPAREN RBRACE RANGLE OR NE LE LBRACE LANGLE GE EQ COMMA ASSIGN AND
--   reduce production expr -> expr RANGLE expr

State 102:
## Known stack suffix:
## expr ADD
## LR(1) items:
expr -> expr ADD . expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
## Transitions:
-- On TRUE shift to state 72
-- On SUBS shift to state 73
-- On STR_LITERAL shift to state 74
-- On REF shift to state 75
-- On NOT shift to state 76
-- On LPAREN shift to state 77
-- On INT shift to state 79
-- On ID shift to state 80
-- On FALSE shift to state 84
-- On BOX shift to state 85
-- On ASTERISK shift to state 87
-- On path_expr shift to state 88
-- On expr shift to state 103
## Reductions:

State 103:
## Known stack suffix:
## expr ADD expr
## LR(1) items:
expr -> expr . DOT ID [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . ASSIGN expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . ADD expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr ADD expr . [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . SUBS expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . ASTERISK expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . DIV expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . LE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . GE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . RANGLE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . LANGLE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . EQ expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . NE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . OR expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . AND expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . LPAREN args_expr RPAREN [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
## Transitions:
-- On LPAREN shift to state 90
-- On DOT shift to state 94
-- On DIV shift to state 96
-- On ASTERISK shift to state 98
## Reductions:
-- On SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LE LBRACE LANGLE GE EQ COMMA ASSIGN AND ADD
--   reduce production expr -> expr ADD expr

State 104:
## Known stack suffix:
## expr OR
## LR(1) items:
expr -> expr OR . expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
## Transitions:
-- On TRUE shift to state 72
-- On SUBS shift to state 73
-- On STR_LITERAL shift to state 74
-- On REF shift to state 75
-- On NOT shift to state 76
-- On LPAREN shift to state 77
-- On INT shift to state 79
-- On ID shift to state 80
-- On FALSE shift to state 84
-- On BOX shift to state 85
-- On ASTERISK shift to state 87
-- On path_expr shift to state 88
-- On expr shift to state 105
## Reductions:

State 105:
## Known stack suffix:
## expr OR expr
## LR(1) items:
expr -> expr . DOT ID [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . ASSIGN expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . ADD expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . SUBS expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . ASTERISK expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . DIV expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . LE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . GE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . RANGLE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . LANGLE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . EQ expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . NE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . OR expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr OR expr . [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . AND expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . LPAREN args_expr RPAREN [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
## Transitions:
-- On SUBS shift to state 92
-- On RANGLE shift to state 100
-- On NE shift to state 106
-- On LPAREN shift to state 90
-- On LE shift to state 108
-- On LANGLE shift to state 110
-- On GE shift to state 112
-- On EQ shift to state 114
-- On DOT shift to state 94
-- On DIV shift to state 96
-- On ASTERISK shift to state 98
-- On ADD shift to state 102
## Reductions:
-- On SEMICOLON RPAREN RBRACE OR LBRACE COMMA ASSIGN AND
--   reduce production expr -> expr OR expr

State 106:
## Known stack suffix:
## expr NE
## LR(1) items:
expr -> expr NE . expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
## Transitions:
-- On TRUE shift to state 72
-- On SUBS shift to state 73
-- On STR_LITERAL shift to state 74
-- On REF shift to state 75
-- On NOT shift to state 76
-- On LPAREN shift to state 77
-- On INT shift to state 79
-- On ID shift to state 80
-- On FALSE shift to state 84
-- On BOX shift to state 85
-- On ASTERISK shift to state 87
-- On path_expr shift to state 88
-- On expr shift to state 107
## Reductions:

State 107:
## Known stack suffix:
## expr NE expr
## LR(1) items:
expr -> expr . DOT ID [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . ASSIGN expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . ADD expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . SUBS expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . ASTERISK expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . DIV expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . LE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . GE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . RANGLE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . LANGLE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . EQ expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . NE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr NE expr . [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . OR expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . AND expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . LPAREN args_expr RPAREN [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
## Transitions:
-- On SUBS shift to state 92
-- On RANGLE shift to state 100
-- On LPAREN shift to state 90
-- On LE shift to state 108
-- On LANGLE shift to state 110
-- On GE shift to state 112
-- On DOT shift to state 94
-- On DIV shift to state 96
-- On ASTERISK shift to state 98
-- On ADD shift to state 102
## Reductions:
-- On SEMICOLON RPAREN RBRACE OR NE LBRACE EQ COMMA ASSIGN AND
--   reduce production expr -> expr NE expr

State 108:
## Known stack suffix:
## expr LE
## LR(1) items:
expr -> expr LE . expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
## Transitions:
-- On TRUE shift to state 72
-- On SUBS shift to state 73
-- On STR_LITERAL shift to state 74
-- On REF shift to state 75
-- On NOT shift to state 76
-- On LPAREN shift to state 77
-- On INT shift to state 79
-- On ID shift to state 80
-- On FALSE shift to state 84
-- On BOX shift to state 85
-- On ASTERISK shift to state 87
-- On path_expr shift to state 88
-- On expr shift to state 109
## Reductions:

State 109:
## Known stack suffix:
## expr LE expr
## LR(1) items:
expr -> expr . DOT ID [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . ASSIGN expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . ADD expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . SUBS expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . ASTERISK expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . DIV expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . LE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr LE expr . [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . GE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . RANGLE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . LANGLE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . EQ expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . NE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . OR expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . AND expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . LPAREN args_expr RPAREN [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
## Transitions:
-- On SUBS shift to state 92
-- On LPAREN shift to state 90
-- On DOT shift to state 94
-- On DIV shift to state 96
-- On ASTERISK shift to state 98
-- On ADD shift to state 102
## Reductions:
-- On SEMICOLON RPAREN RBRACE RANGLE OR NE LE LBRACE LANGLE GE EQ COMMA ASSIGN AND
--   reduce production expr -> expr LE expr

State 110:
## Known stack suffix:
## expr LANGLE
## LR(1) items:
expr -> expr LANGLE . expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
## Transitions:
-- On TRUE shift to state 72
-- On SUBS shift to state 73
-- On STR_LITERAL shift to state 74
-- On REF shift to state 75
-- On NOT shift to state 76
-- On LPAREN shift to state 77
-- On INT shift to state 79
-- On ID shift to state 80
-- On FALSE shift to state 84
-- On BOX shift to state 85
-- On ASTERISK shift to state 87
-- On path_expr shift to state 88
-- On expr shift to state 111
## Reductions:

State 111:
## Known stack suffix:
## expr LANGLE expr
## LR(1) items:
expr -> expr . DOT ID [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . ASSIGN expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . ADD expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . SUBS expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . ASTERISK expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . DIV expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . LE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . GE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . RANGLE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . LANGLE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr LANGLE expr . [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . EQ expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . NE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . OR expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . AND expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . LPAREN args_expr RPAREN [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
## Transitions:
-- On SUBS shift to state 92
-- On LPAREN shift to state 90
-- On DOT shift to state 94
-- On DIV shift to state 96
-- On ASTERISK shift to state 98
-- On ADD shift to state 102
## Reductions:
-- On SEMICOLON RPAREN RBRACE RANGLE OR NE LE LBRACE LANGLE GE EQ COMMA ASSIGN AND
--   reduce production expr -> expr LANGLE expr

State 112:
## Known stack suffix:
## expr GE
## LR(1) items:
expr -> expr GE . expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
## Transitions:
-- On TRUE shift to state 72
-- On SUBS shift to state 73
-- On STR_LITERAL shift to state 74
-- On REF shift to state 75
-- On NOT shift to state 76
-- On LPAREN shift to state 77
-- On INT shift to state 79
-- On ID shift to state 80
-- On FALSE shift to state 84
-- On BOX shift to state 85
-- On ASTERISK shift to state 87
-- On path_expr shift to state 88
-- On expr shift to state 113
## Reductions:

State 113:
## Known stack suffix:
## expr GE expr
## LR(1) items:
expr -> expr . DOT ID [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . ASSIGN expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . ADD expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . SUBS expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . ASTERISK expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . DIV expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . LE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . GE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr GE expr . [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . RANGLE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . LANGLE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . EQ expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . NE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . OR expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . AND expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . LPAREN args_expr RPAREN [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
## Transitions:
-- On SUBS shift to state 92
-- On LPAREN shift to state 90
-- On DOT shift to state 94
-- On DIV shift to state 96
-- On ASTERISK shift to state 98
-- On ADD shift to state 102
## Reductions:
-- On SEMICOLON RPAREN RBRACE RANGLE OR NE LE LBRACE LANGLE GE EQ COMMA ASSIGN AND
--   reduce production expr -> expr GE expr

State 114:
## Known stack suffix:
## expr EQ
## LR(1) items:
expr -> expr EQ . expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
## Transitions:
-- On TRUE shift to state 72
-- On SUBS shift to state 73
-- On STR_LITERAL shift to state 74
-- On REF shift to state 75
-- On NOT shift to state 76
-- On LPAREN shift to state 77
-- On INT shift to state 79
-- On ID shift to state 80
-- On FALSE shift to state 84
-- On BOX shift to state 85
-- On ASTERISK shift to state 87
-- On path_expr shift to state 88
-- On expr shift to state 115
## Reductions:

State 115:
## Known stack suffix:
## expr EQ expr
## LR(1) items:
expr -> expr . DOT ID [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . ASSIGN expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . ADD expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . SUBS expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . ASTERISK expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . DIV expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . LE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . GE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . RANGLE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . LANGLE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . EQ expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr EQ expr . [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . NE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . OR expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . AND expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . LPAREN args_expr RPAREN [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
## Transitions:
-- On SUBS shift to state 92
-- On RANGLE shift to state 100
-- On LPAREN shift to state 90
-- On LE shift to state 108
-- On LANGLE shift to state 110
-- On GE shift to state 112
-- On DOT shift to state 94
-- On DIV shift to state 96
-- On ASTERISK shift to state 98
-- On ADD shift to state 102
## Reductions:
-- On SEMICOLON RPAREN RBRACE OR NE LBRACE EQ COMMA ASSIGN AND
--   reduce production expr -> expr EQ expr

State 116:
## Known stack suffix:
## expr COMMA
## LR(1) items:
args_expr -> expr COMMA . args_expr [ RPAREN ]
## Transitions:
-- On TRUE shift to state 72
-- On SUBS shift to state 73
-- On STR_LITERAL shift to state 74
-- On REF shift to state 75
-- On NOT shift to state 76
-- On LPAREN shift to state 77
-- On INT shift to state 79
-- On ID shift to state 80
-- On FALSE shift to state 84
-- On BOX shift to state 85
-- On ASTERISK shift to state 87
-- On path_expr shift to state 88
-- On expr shift to state 91
-- On args_expr shift to state 117
## Reductions:
-- On RPAREN
--   reduce production args_expr ->

State 117:
## Known stack suffix:
## expr COMMA args_expr
## LR(1) items:
args_expr -> expr COMMA args_expr . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production args_expr -> expr COMMA args_expr

State 118:
## Known stack suffix:
## expr ASSIGN
## LR(1) items:
expr -> expr ASSIGN . expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
## Transitions:
-- On TRUE shift to state 72
-- On SUBS shift to state 73
-- On STR_LITERAL shift to state 74
-- On REF shift to state 75
-- On NOT shift to state 76
-- On LPAREN shift to state 77
-- On INT shift to state 79
-- On ID shift to state 80
-- On FALSE shift to state 84
-- On BOX shift to state 85
-- On ASTERISK shift to state 87
-- On path_expr shift to state 88
-- On expr shift to state 119
## Reductions:

State 119:
## Known stack suffix:
## expr ASSIGN expr
## LR(1) items:
expr -> expr . DOT ID [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . ASSIGN expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr ASSIGN expr . [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . ADD expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . SUBS expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . ASTERISK expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . DIV expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . LE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . GE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . RANGLE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . LANGLE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . EQ expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . NE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . OR expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . AND expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . LPAREN args_expr RPAREN [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
## Transitions:
-- On SUBS shift to state 92
-- On RANGLE shift to state 100
-- On OR shift to state 104
-- On NE shift to state 106
-- On LPAREN shift to state 90
-- On LE shift to state 108
-- On LANGLE shift to state 110
-- On GE shift to state 112
-- On EQ shift to state 114
-- On DOT shift to state 94
-- On DIV shift to state 96
-- On ASTERISK shift to state 98
-- On AND shift to state 120
-- On ADD shift to state 102
## Reductions:
-- On SEMICOLON RPAREN RBRACE LBRACE COMMA ASSIGN
--   reduce production expr -> expr ASSIGN expr

State 120:
## Known stack suffix:
## expr AND
## LR(1) items:
expr -> expr AND . expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
## Transitions:
-- On TRUE shift to state 72
-- On SUBS shift to state 73
-- On STR_LITERAL shift to state 74
-- On REF shift to state 75
-- On NOT shift to state 76
-- On LPAREN shift to state 77
-- On INT shift to state 79
-- On ID shift to state 80
-- On FALSE shift to state 84
-- On BOX shift to state 85
-- On ASTERISK shift to state 87
-- On path_expr shift to state 88
-- On expr shift to state 121
## Reductions:

State 121:
## Known stack suffix:
## expr AND expr
## LR(1) items:
expr -> expr . DOT ID [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . ASSIGN expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . ADD expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . SUBS expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . ASTERISK expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . DIV expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . LE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . GE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . RANGLE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . LANGLE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . EQ expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . NE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . OR expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . AND expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr AND expr . [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . LPAREN args_expr RPAREN [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
## Transitions:
-- On SUBS shift to state 92
-- On RANGLE shift to state 100
-- On NE shift to state 106
-- On LPAREN shift to state 90
-- On LE shift to state 108
-- On LANGLE shift to state 110
-- On GE shift to state 112
-- On EQ shift to state 114
-- On DOT shift to state 94
-- On DIV shift to state 96
-- On ASTERISK shift to state 98
-- On ADD shift to state 102
## Reductions:
-- On SEMICOLON RPAREN RBRACE OR LBRACE COMMA ASSIGN AND
--   reduce production expr -> expr AND expr

State 122:
## Known stack suffix:
## expr LPAREN args_expr
## LR(1) items:
expr -> expr LPAREN args_expr . RPAREN [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
## Transitions:
-- On RPAREN shift to state 123
## Reductions:

State 123:
## Known stack suffix:
## expr LPAREN args_expr RPAREN
## LR(1) items:
expr -> expr LPAREN args_expr RPAREN . [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
## Transitions:
## Reductions:
-- On SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD
--   reduce production expr -> expr LPAREN args_expr RPAREN

State 124:
## Known stack suffix:
## BOX LPAREN expr
## LR(1) items:
expr -> BOX LPAREN expr . RPAREN [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . DOT ID [ SUBS RPAREN RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
expr -> expr . ASSIGN expr [ SUBS RPAREN RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
expr -> expr . ADD expr [ SUBS RPAREN RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
expr -> expr . SUBS expr [ SUBS RPAREN RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
expr -> expr . ASTERISK expr [ SUBS RPAREN RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
expr -> expr . DIV expr [ SUBS RPAREN RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
expr -> expr . LE expr [ SUBS RPAREN RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
expr -> expr . GE expr [ SUBS RPAREN RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
expr -> expr . RANGLE expr [ SUBS RPAREN RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
expr -> expr . LANGLE expr [ SUBS RPAREN RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
expr -> expr . EQ expr [ SUBS RPAREN RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
expr -> expr . NE expr [ SUBS RPAREN RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
expr -> expr . OR expr [ SUBS RPAREN RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
expr -> expr . AND expr [ SUBS RPAREN RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
expr -> expr . LPAREN args_expr RPAREN [ SUBS RPAREN RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
## Transitions:
-- On SUBS shift to state 92
-- On RPAREN shift to state 125
-- On RANGLE shift to state 100
-- On OR shift to state 104
-- On NE shift to state 106
-- On LPAREN shift to state 90
-- On LE shift to state 108
-- On LANGLE shift to state 110
-- On GE shift to state 112
-- On EQ shift to state 114
-- On DOT shift to state 94
-- On DIV shift to state 96
-- On ASTERISK shift to state 98
-- On ASSIGN shift to state 118
-- On AND shift to state 120
-- On ADD shift to state 102
## Reductions:

State 125:
## Known stack suffix:
## BOX LPAREN expr RPAREN
## LR(1) items:
expr -> BOX LPAREN expr RPAREN . [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
## Transitions:
## Reductions:
-- On SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD
--   reduce production expr -> BOX LPAREN expr RPAREN

State 126:
## Known stack suffix:
## ID COLON2 ID LPAREN expr
## LR(1) items:
expr -> expr . DOT ID [ SUBS RPAREN RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
expr -> expr . ASSIGN expr [ SUBS RPAREN RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
expr -> ID COLON2 ID LPAREN expr . RPAREN [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . ADD expr [ SUBS RPAREN RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
expr -> expr . SUBS expr [ SUBS RPAREN RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
expr -> expr . ASTERISK expr [ SUBS RPAREN RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
expr -> expr . DIV expr [ SUBS RPAREN RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
expr -> expr . LE expr [ SUBS RPAREN RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
expr -> expr . GE expr [ SUBS RPAREN RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
expr -> expr . RANGLE expr [ SUBS RPAREN RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
expr -> expr . LANGLE expr [ SUBS RPAREN RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
expr -> expr . EQ expr [ SUBS RPAREN RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
expr -> expr . NE expr [ SUBS RPAREN RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
expr -> expr . OR expr [ SUBS RPAREN RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
expr -> expr . AND expr [ SUBS RPAREN RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
expr -> expr . LPAREN args_expr RPAREN [ SUBS RPAREN RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
## Transitions:
-- On SUBS shift to state 92
-- On RPAREN shift to state 127
-- On RANGLE shift to state 100
-- On OR shift to state 104
-- On NE shift to state 106
-- On LPAREN shift to state 90
-- On LE shift to state 108
-- On LANGLE shift to state 110
-- On GE shift to state 112
-- On EQ shift to state 114
-- On DOT shift to state 94
-- On DIV shift to state 96
-- On ASTERISK shift to state 98
-- On ASSIGN shift to state 118
-- On AND shift to state 120
-- On ADD shift to state 102
## Reductions:

State 127:
## Known stack suffix:
## ID COLON2 ID LPAREN expr RPAREN
## LR(1) items:
expr -> ID COLON2 ID LPAREN expr RPAREN . [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
## Transitions:
## Reductions:
-- On SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD
--   reduce production expr -> ID COLON2 ID LPAREN expr RPAREN

State 128:
## Known stack suffix:
## LPAREN expr
## LR(1) items:
expr -> LPAREN expr . RPAREN [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . DOT ID [ SUBS RPAREN RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
expr -> expr . ASSIGN expr [ SUBS RPAREN RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
expr -> expr . ADD expr [ SUBS RPAREN RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
expr -> expr . SUBS expr [ SUBS RPAREN RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
expr -> expr . ASTERISK expr [ SUBS RPAREN RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
expr -> expr . DIV expr [ SUBS RPAREN RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
expr -> expr . LE expr [ SUBS RPAREN RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
expr -> expr . GE expr [ SUBS RPAREN RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
expr -> expr . RANGLE expr [ SUBS RPAREN RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
expr -> expr . LANGLE expr [ SUBS RPAREN RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
expr -> expr . EQ expr [ SUBS RPAREN RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
expr -> expr . NE expr [ SUBS RPAREN RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
expr -> expr . OR expr [ SUBS RPAREN RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
expr -> expr . AND expr [ SUBS RPAREN RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
expr -> expr . LPAREN args_expr RPAREN [ SUBS RPAREN RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
## Transitions:
-- On SUBS shift to state 92
-- On RPAREN shift to state 129
-- On RANGLE shift to state 100
-- On OR shift to state 104
-- On NE shift to state 106
-- On LPAREN shift to state 90
-- On LE shift to state 108
-- On LANGLE shift to state 110
-- On GE shift to state 112
-- On EQ shift to state 114
-- On DOT shift to state 94
-- On DIV shift to state 96
-- On ASTERISK shift to state 98
-- On ASSIGN shift to state 118
-- On AND shift to state 120
-- On ADD shift to state 102
## Reductions:

State 129:
## Known stack suffix:
## LPAREN expr RPAREN
## LR(1) items:
expr -> LPAREN expr RPAREN . [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
## Transitions:
## Reductions:
-- On SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD
--   reduce production expr -> LPAREN expr RPAREN

State 130:
## Known stack suffix:
## NOT expr
## LR(1) items:
expr -> expr . DOT ID [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . ASSIGN expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> NOT expr . [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . ADD expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . SUBS expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . ASTERISK expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . DIV expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . LE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . GE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . RANGLE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . LANGLE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . EQ expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . NE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . OR expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . AND expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . LPAREN args_expr RPAREN [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
## Transitions:
-- On SUBS shift to state 92
-- On RANGLE shift to state 100
-- On NE shift to state 106
-- On LPAREN shift to state 90
-- On LE shift to state 108
-- On LANGLE shift to state 110
-- On GE shift to state 112
-- On EQ shift to state 114
-- On DOT shift to state 94
-- On DIV shift to state 96
-- On ASTERISK shift to state 98
-- On ADD shift to state 102
## Reductions:
-- On SEMICOLON RPAREN RBRACE OR LBRACE COMMA ASSIGN AND
--   reduce production expr -> NOT expr

State 131:
## Known stack suffix:
## REF MUT
## LR(1) items:
expr -> REF MUT . expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
## Transitions:
-- On TRUE shift to state 72
-- On SUBS shift to state 73
-- On STR_LITERAL shift to state 74
-- On REF shift to state 75
-- On NOT shift to state 76
-- On LPAREN shift to state 77
-- On INT shift to state 79
-- On ID shift to state 80
-- On FALSE shift to state 84
-- On BOX shift to state 85
-- On ASTERISK shift to state 87
-- On path_expr shift to state 88
-- On expr shift to state 132
## Reductions:

State 132:
## Known stack suffix:
## REF MUT expr
## LR(1) items:
expr -> REF MUT expr . [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . DOT ID [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . ASSIGN expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . ADD expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . SUBS expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . ASTERISK expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . DIV expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . LE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . GE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . RANGLE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . LANGLE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . EQ expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . NE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . OR expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . AND expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . LPAREN args_expr RPAREN [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
## Transitions:
-- On LPAREN shift to state 90
-- On DOT shift to state 94
## Reductions:
-- On SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LE LBRACE LANGLE GE EQ DIV COMMA ASTERISK ASSIGN AND ADD
--   reduce production expr -> REF MUT expr

State 133:
## Known stack suffix:
## REF expr
## LR(1) items:
expr -> REF expr . [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . DOT ID [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . ASSIGN expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . ADD expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . SUBS expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . ASTERISK expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . DIV expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . LE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . GE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . RANGLE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . LANGLE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . EQ expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . NE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . OR expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . AND expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . LPAREN args_expr RPAREN [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
## Transitions:
-- On LPAREN shift to state 90
-- On DOT shift to state 94
## Reductions:
-- On SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LE LBRACE LANGLE GE EQ DIV COMMA ASTERISK ASSIGN AND ADD
--   reduce production expr -> REF expr

State 134:
## Known stack suffix:
## SUBS expr
## LR(1) items:
expr -> expr . DOT ID [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . ASSIGN expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> SUBS expr . [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . ADD expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . SUBS expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . ASTERISK expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . DIV expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . LE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . GE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . RANGLE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . LANGLE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . EQ expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . NE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . OR expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . AND expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . LPAREN args_expr RPAREN [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
## Transitions:
-- On LPAREN shift to state 90
-- On DOT shift to state 94
-- On DIV shift to state 96
-- On ASTERISK shift to state 98
## Reductions:
-- On SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LE LBRACE LANGLE GE EQ COMMA ASSIGN AND ADD
--   reduce production expr -> SUBS expr

State 135:
## Known stack suffix:
## WHILE expr
## LR(1) items:
expr -> expr . DOT ID [ SUBS RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
expr -> expr . ASSIGN expr [ SUBS RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
expr -> expr . ADD expr [ SUBS RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
expr -> expr . SUBS expr [ SUBS RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
expr -> expr . ASTERISK expr [ SUBS RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
expr -> expr . DIV expr [ SUBS RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
expr -> expr . LE expr [ SUBS RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
expr -> expr . GE expr [ SUBS RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
expr -> expr . RANGLE expr [ SUBS RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
expr -> expr . LANGLE expr [ SUBS RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
expr -> expr . EQ expr [ SUBS RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
expr -> expr . NE expr [ SUBS RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
expr -> expr . OR expr [ SUBS RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
expr -> expr . AND expr [ SUBS RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
expr -> expr . LPAREN args_expr RPAREN [ SUBS RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
stmt -> WHILE expr . LBRACE stmt RBRACE stmt [ RBRACE ]
## Transitions:
-- On SUBS shift to state 92
-- On RANGLE shift to state 100
-- On OR shift to state 104
-- On NE shift to state 106
-- On LPAREN shift to state 90
-- On LE shift to state 108
-- On LBRACE shift to state 136
-- On LANGLE shift to state 110
-- On GE shift to state 112
-- On EQ shift to state 114
-- On DOT shift to state 94
-- On DIV shift to state 96
-- On ASTERISK shift to state 98
-- On ASSIGN shift to state 118
-- On AND shift to state 120
-- On ADD shift to state 102
## Reductions:

State 136:
## Known stack suffix:
## WHILE expr LBRACE
## LR(1) items:
stmt -> WHILE expr LBRACE . stmt RBRACE stmt [ RBRACE ]
## Transitions:
-- On WHILE shift to state 71
-- On TRUE shift to state 72
-- On SUBS shift to state 73
-- On STR_LITERAL shift to state 74
-- On RETURN shift to state 137
-- On REF shift to state 75
-- On NOT shift to state 76
-- On MATCH shift to state 139
-- On LPAREN shift to state 77
-- On LOOP shift to state 153
-- On LET shift to state 155
-- On LBRACE shift to state 170
-- On INT shift to state 79
-- On IF shift to state 171
-- On ID shift to state 80
-- On FALSE shift to state 84
-- On CONTINUE shift to state 174
-- On BREAK shift to state 175
-- On BOX shift to state 85
-- On ASTERISK shift to state 87
-- On stmt_item shift to state 176
-- On stmt shift to state 214
-- On path_expr shift to state 88
-- On expr shift to state 179
## Reductions:
-- On SEMICOLON RBRACE
--   reduce production stmt_item ->

State 137:
## Known stack suffix:
## RETURN
## LR(1) items:
stmt_item -> RETURN . [ SEMICOLON RBRACE ]
stmt_item -> RETURN . expr [ SEMICOLON RBRACE ]
## Transitions:
-- On TRUE shift to state 72
-- On SUBS shift to state 73
-- On STR_LITERAL shift to state 74
-- On REF shift to state 75
-- On NOT shift to state 76
-- On LPAREN shift to state 77
-- On INT shift to state 79
-- On ID shift to state 80
-- On FALSE shift to state 84
-- On BOX shift to state 85
-- On ASTERISK shift to state 87
-- On path_expr shift to state 88
-- On expr shift to state 138
## Reductions:
-- On SEMICOLON RBRACE
--   reduce production stmt_item -> RETURN

State 138:
## Known stack suffix:
## RETURN expr
## LR(1) items:
expr -> expr . DOT ID [ SUBS SEMICOLON RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
expr -> expr . ASSIGN expr [ SUBS SEMICOLON RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
expr -> expr . ADD expr [ SUBS SEMICOLON RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
expr -> expr . SUBS expr [ SUBS SEMICOLON RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
expr -> expr . ASTERISK expr [ SUBS SEMICOLON RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
expr -> expr . DIV expr [ SUBS SEMICOLON RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
expr -> expr . LE expr [ SUBS SEMICOLON RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
expr -> expr . GE expr [ SUBS SEMICOLON RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
expr -> expr . RANGLE expr [ SUBS SEMICOLON RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
expr -> expr . LANGLE expr [ SUBS SEMICOLON RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
expr -> expr . EQ expr [ SUBS SEMICOLON RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
expr -> expr . NE expr [ SUBS SEMICOLON RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
expr -> expr . OR expr [ SUBS SEMICOLON RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
expr -> expr . AND expr [ SUBS SEMICOLON RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
expr -> expr . LPAREN args_expr RPAREN [ SUBS SEMICOLON RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
stmt_item -> RETURN expr . [ SEMICOLON RBRACE ]
## Transitions:
-- On SUBS shift to state 92
-- On RANGLE shift to state 100
-- On OR shift to state 104
-- On NE shift to state 106
-- On LPAREN shift to state 90
-- On LE shift to state 108
-- On LANGLE shift to state 110
-- On GE shift to state 112
-- On EQ shift to state 114
-- On DOT shift to state 94
-- On DIV shift to state 96
-- On ASTERISK shift to state 98
-- On ASSIGN shift to state 118
-- On AND shift to state 120
-- On ADD shift to state 102
## Reductions:
-- On SEMICOLON RBRACE
--   reduce production stmt_item -> RETURN expr

State 139:
## Known stack suffix:
## MATCH
## LR(1) items:
stmt_item -> MATCH . expr LBRACE match_arms RBRACE [ SEMICOLON RBRACE ]
## Transitions:
-- On TRUE shift to state 72
-- On SUBS shift to state 73
-- On STR_LITERAL shift to state 74
-- On REF shift to state 75
-- On NOT shift to state 76
-- On LPAREN shift to state 77
-- On INT shift to state 79
-- On ID shift to state 80
-- On FALSE shift to state 84
-- On BOX shift to state 85
-- On ASTERISK shift to state 87
-- On path_expr shift to state 88
-- On expr shift to state 140
## Reductions:

State 140:
## Known stack suffix:
## MATCH expr
## LR(1) items:
expr -> expr . DOT ID [ SUBS RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
expr -> expr . ASSIGN expr [ SUBS RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
expr -> expr . ADD expr [ SUBS RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
expr -> expr . SUBS expr [ SUBS RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
expr -> expr . ASTERISK expr [ SUBS RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
expr -> expr . DIV expr [ SUBS RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
expr -> expr . LE expr [ SUBS RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
expr -> expr . GE expr [ SUBS RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
expr -> expr . RANGLE expr [ SUBS RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
expr -> expr . LANGLE expr [ SUBS RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
expr -> expr . EQ expr [ SUBS RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
expr -> expr . NE expr [ SUBS RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
expr -> expr . OR expr [ SUBS RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
expr -> expr . AND expr [ SUBS RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
expr -> expr . LPAREN args_expr RPAREN [ SUBS RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
stmt_item -> MATCH expr . LBRACE match_arms RBRACE [ SEMICOLON RBRACE ]
## Transitions:
-- On SUBS shift to state 92
-- On RANGLE shift to state 100
-- On OR shift to state 104
-- On NE shift to state 106
-- On LPAREN shift to state 90
-- On LE shift to state 108
-- On LBRACE shift to state 141
-- On LANGLE shift to state 110
-- On GE shift to state 112
-- On EQ shift to state 114
-- On DOT shift to state 94
-- On DIV shift to state 96
-- On ASTERISK shift to state 98
-- On ASSIGN shift to state 118
-- On AND shift to state 120
-- On ADD shift to state 102
## Reductions:

State 141:
## Known stack suffix:
## MATCH expr LBRACE
## LR(1) items:
stmt_item -> MATCH expr LBRACE . match_arms RBRACE [ SEMICOLON RBRACE ]
## Transitions:
-- On PREF shift to state 142
-- On ID shift to state 146
-- On tuple_struct_pattern shift to state 149
-- On pattern shift to state 150
-- On path_pattern shift to state 201
-- On path_expr shift to state 202
-- On match_arms shift to state 210
-- On match_arm shift to state 212
-- On identifier_pattern shift to state 206
## Reductions:

State 142:
## Known stack suffix:
## PREF
## LR(1) items:
identifier_pattern -> PREF . MUT ID [ RPAREN RARROWW COMMA ]
identifier_pattern -> PREF . ID [ RPAREN RARROWW COMMA ]
## Transitions:
-- On MUT shift to state 143
-- On ID shift to state 145
## Reductions:

State 143:
## Known stack suffix:
## PREF MUT
## LR(1) items:
identifier_pattern -> PREF MUT . ID [ RPAREN RARROWW COMMA ]
## Transitions:
-- On ID shift to state 144
## Reductions:

State 144:
## Known stack suffix:
## PREF MUT ID
## LR(1) items:
identifier_pattern -> PREF MUT ID . [ RPAREN RARROWW COMMA ]
## Transitions:
## Reductions:
-- On RPAREN RARROWW COMMA
--   reduce production identifier_pattern -> PREF MUT ID

State 145:
## Known stack suffix:
## PREF ID
## LR(1) items:
identifier_pattern -> PREF ID . [ RPAREN RARROWW COMMA ]
## Transitions:
## Reductions:
-- On RPAREN RARROWW COMMA
--   reduce production identifier_pattern -> PREF ID

State 146:
## Known stack suffix:
## ID
## LR(1) items:
identifier_pattern -> ID . [ RPAREN RARROWW COMMA ]
path_expr -> ID . COLON2 ID [ RPAREN RARROWW LPAREN COMMA ]
## Transitions:
-- On COLON2 shift to state 147
## Reductions:
-- On RPAREN RARROWW COMMA
--   reduce production identifier_pattern -> ID

State 147:
## Known stack suffix:
## ID COLON2
## LR(1) items:
path_expr -> ID COLON2 . ID [ RPAREN RARROWW LPAREN COMMA ]
## Transitions:
-- On ID shift to state 148
## Reductions:

State 148:
## Known stack suffix:
## ID COLON2 ID
## LR(1) items:
path_expr -> ID COLON2 ID . [ RPAREN RARROWW LPAREN COMMA ]
## Transitions:
## Reductions:
-- On RPAREN RARROWW LPAREN COMMA
--   reduce production path_expr -> ID COLON2 ID

State 149:
## Known stack suffix:
## tuple_struct_pattern
## LR(1) items:
pattern -> tuple_struct_pattern . [ RPAREN RARROWW COMMA ]
## Transitions:
## Reductions:
-- On RPAREN RARROWW COMMA
--   reduce production pattern -> tuple_struct_pattern

State 150:
## Known stack suffix:
## pattern
## LR(1) items:
match_arm -> pattern . RARROWW LBRACE stmt RBRACE [ RBRACE PREF ID ]
## Transitions:
-- On RARROWW shift to state 151
## Reductions:

State 151:
## Known stack suffix:
## pattern RARROWW
## LR(1) items:
match_arm -> pattern RARROWW . LBRACE stmt RBRACE [ RBRACE PREF ID ]
## Transitions:
-- On LBRACE shift to state 152
## Reductions:

State 152:
## Known stack suffix:
## pattern RARROWW LBRACE
## LR(1) items:
match_arm -> pattern RARROWW LBRACE . stmt RBRACE [ RBRACE PREF ID ]
## Transitions:
-- On WHILE shift to state 71
-- On TRUE shift to state 72
-- On SUBS shift to state 73
-- On STR_LITERAL shift to state 74
-- On RETURN shift to state 137
-- On REF shift to state 75
-- On NOT shift to state 76
-- On MATCH shift to state 139
-- On LPAREN shift to state 77
-- On LOOP shift to state 153
-- On LET shift to state 155
-- On LBRACE shift to state 170
-- On INT shift to state 79
-- On IF shift to state 171
-- On ID shift to state 80
-- On FALSE shift to state 84
-- On CONTINUE shift to state 174
-- On BREAK shift to state 175
-- On BOX shift to state 85
-- On ASTERISK shift to state 87
-- On stmt_item shift to state 176
-- On stmt shift to state 199
-- On path_expr shift to state 88
-- On expr shift to state 179
## Reductions:
-- On SEMICOLON RBRACE
--   reduce production stmt_item ->

State 153:
## Known stack suffix:
## LOOP
## LR(1) items:
stmt -> LOOP . LBRACE stmt RBRACE stmt [ RBRACE ]
## Transitions:
-- On LBRACE shift to state 154
## Reductions:

State 154:
## Known stack suffix:
## LOOP LBRACE
## LR(1) items:
stmt -> LOOP LBRACE . stmt RBRACE stmt [ RBRACE ]
## Transitions:
-- On WHILE shift to state 71
-- On TRUE shift to state 72
-- On SUBS shift to state 73
-- On STR_LITERAL shift to state 74
-- On RETURN shift to state 137
-- On REF shift to state 75
-- On NOT shift to state 76
-- On MATCH shift to state 139
-- On LPAREN shift to state 77
-- On LOOP shift to state 153
-- On LET shift to state 155
-- On LBRACE shift to state 170
-- On INT shift to state 79
-- On IF shift to state 171
-- On ID shift to state 80
-- On FALSE shift to state 84
-- On CONTINUE shift to state 174
-- On BREAK shift to state 175
-- On BOX shift to state 85
-- On ASTERISK shift to state 87
-- On stmt_item shift to state 176
-- On stmt shift to state 196
-- On path_expr shift to state 88
-- On expr shift to state 179
## Reductions:
-- On SEMICOLON RBRACE
--   reduce production stmt_item ->

State 155:
## Known stack suffix:
## LET
## LR(1) items:
stmt_item -> LET . ID COLON ty [ SEMICOLON RBRACE ]
stmt_item -> LET . ID COLON ty ASSIGN expr [ SEMICOLON RBRACE ]
stmt_item -> LET . ID COLON ty ASSIGN ID LBRACE struct_fields RBRACE [ SEMICOLON RBRACE ]
## Transitions:
-- On ID shift to state 156
## Reductions:

State 156:
## Known stack suffix:
## LET ID
## LR(1) items:
stmt_item -> LET ID . COLON ty [ SEMICOLON RBRACE ]
stmt_item -> LET ID . COLON ty ASSIGN expr [ SEMICOLON RBRACE ]
stmt_item -> LET ID . COLON ty ASSIGN ID LBRACE struct_fields RBRACE [ SEMICOLON RBRACE ]
## Transitions:
-- On COLON shift to state 157
## Reductions:

State 157:
## Known stack suffix:
## LET ID COLON
## LR(1) items:
stmt_item -> LET ID COLON . ty [ SEMICOLON RBRACE ]
stmt_item -> LET ID COLON . ty ASSIGN expr [ SEMICOLON RBRACE ]
stmt_item -> LET ID COLON . ty ASSIGN ID LBRACE struct_fields RBRACE [ SEMICOLON RBRACE ]
## Transitions:
-- On UINT8 shift to state 22
-- On UINT32 shift to state 23
-- On UINT16 shift to state 24
-- On REF shift to state 25
-- On LPAREN shift to state 29
-- On INT8 shift to state 31
-- On INT32 shift to state 32
-- On INT16 shift to state 33
-- On ID shift to state 34
-- On FN shift to state 36
-- On FLOAT64 shift to state 39
-- On FLOAT32 shift to state 40
-- On BOX shift to state 41
-- On BOOL shift to state 43
-- On ty shift to state 158
## Reductions:

State 158:
## Known stack suffix:
## LET ID COLON ty
## LR(1) items:
stmt_item -> LET ID COLON ty . [ SEMICOLON RBRACE ]
stmt_item -> LET ID COLON ty . ASSIGN expr [ SEMICOLON RBRACE ]
stmt_item -> LET ID COLON ty . ASSIGN ID LBRACE struct_fields RBRACE [ SEMICOLON RBRACE ]
## Transitions:
-- On ASSIGN shift to state 159
## Reductions:
-- On SEMICOLON RBRACE
--   reduce production stmt_item -> LET ID COLON ty

State 159:
## Known stack suffix:
## LET ID COLON ty ASSIGN
## LR(1) items:
stmt_item -> LET ID COLON ty ASSIGN . expr [ SEMICOLON RBRACE ]
stmt_item -> LET ID COLON ty ASSIGN . ID LBRACE struct_fields RBRACE [ SEMICOLON RBRACE ]
## Transitions:
-- On TRUE shift to state 72
-- On SUBS shift to state 73
-- On STR_LITERAL shift to state 74
-- On REF shift to state 75
-- On NOT shift to state 76
-- On LPAREN shift to state 77
-- On INT shift to state 79
-- On ID shift to state 160
-- On FALSE shift to state 84
-- On BOX shift to state 85
-- On ASTERISK shift to state 87
-- On path_expr shift to state 88
-- On expr shift to state 169
## Reductions:

State 160:
## Known stack suffix:
## LET ID COLON ty ASSIGN ID
## LR(1) items:
expr -> ID . [ SUBS SEMICOLON RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
expr -> ID . COLON2 ID LPAREN expr RPAREN [ SUBS SEMICOLON RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
path_expr -> ID . COLON2 ID [ SUBS SEMICOLON RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
stmt_item -> LET ID COLON ty ASSIGN ID . LBRACE struct_fields RBRACE [ SEMICOLON RBRACE ]
## Transitions:
-- On LBRACE shift to state 161
-- On COLON2 shift to state 81
## Reductions:
-- On SUBS SEMICOLON RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD
--   reduce production expr -> ID

State 161:
## Known stack suffix:
## LET ID COLON ty ASSIGN ID LBRACE
## LR(1) items:
stmt_item -> LET ID COLON ty ASSIGN ID LBRACE . struct_fields RBRACE [ SEMICOLON RBRACE ]
## Transitions:
-- On ID shift to state 162
-- On struct_fields shift to state 167
## Reductions:
-- On RBRACE
--   reduce production struct_fields ->

State 162:
## Known stack suffix:
## ID
## LR(1) items:
struct_fields -> ID . COLON expr [ RBRACE ]
struct_fields -> ID . COLON expr COMMA struct_fields [ RBRACE ]
## Transitions:
-- On COLON shift to state 163
## Reductions:

State 163:
## Known stack suffix:
## ID COLON
## LR(1) items:
struct_fields -> ID COLON . expr [ RBRACE ]
struct_fields -> ID COLON . expr COMMA struct_fields [ RBRACE ]
## Transitions:
-- On TRUE shift to state 72
-- On SUBS shift to state 73
-- On STR_LITERAL shift to state 74
-- On REF shift to state 75
-- On NOT shift to state 76
-- On LPAREN shift to state 77
-- On INT shift to state 79
-- On ID shift to state 80
-- On FALSE shift to state 84
-- On BOX shift to state 85
-- On ASTERISK shift to state 87
-- On path_expr shift to state 88
-- On expr shift to state 164
## Reductions:

State 164:
## Known stack suffix:
## ID COLON expr
## LR(1) items:
expr -> expr . DOT ID [ SUBS RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . ASSIGN expr [ SUBS RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . ADD expr [ SUBS RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . SUBS expr [ SUBS RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . ASTERISK expr [ SUBS RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . DIV expr [ SUBS RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . LE expr [ SUBS RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . GE expr [ SUBS RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . RANGLE expr [ SUBS RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . LANGLE expr [ SUBS RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . EQ expr [ SUBS RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . NE expr [ SUBS RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . OR expr [ SUBS RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . AND expr [ SUBS RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
expr -> expr . LPAREN args_expr RPAREN [ SUBS RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]
struct_fields -> ID COLON expr . [ RBRACE ]
struct_fields -> ID COLON expr . COMMA struct_fields [ RBRACE ]
## Transitions:
-- On SUBS shift to state 92
-- On RANGLE shift to state 100
-- On OR shift to state 104
-- On NE shift to state 106
-- On LPAREN shift to state 90
-- On LE shift to state 108
-- On LANGLE shift to state 110
-- On GE shift to state 112
-- On EQ shift to state 114
-- On DOT shift to state 94
-- On DIV shift to state 96
-- On COMMA shift to state 165
-- On ASTERISK shift to state 98
-- On ASSIGN shift to state 118
-- On AND shift to state 120
-- On ADD shift to state 102
## Reductions:
-- On RBRACE
--   reduce production struct_fields -> ID COLON expr

State 165:
## Known stack suffix:
## ID COLON expr COMMA
## LR(1) items:
struct_fields -> ID COLON expr COMMA . struct_fields [ RBRACE ]
## Transitions:
-- On ID shift to state 162
-- On struct_fields shift to state 166
## Reductions:
-- On RBRACE
--   reduce production struct_fields ->

State 166:
## Known stack suffix:
## ID COLON expr COMMA struct_fields
## LR(1) items:
struct_fields -> ID COLON expr COMMA struct_fields . [ RBRACE ]
## Transitions:
## Reductions:
-- On RBRACE
--   reduce production struct_fields -> ID COLON expr COMMA struct_fields

State 167:
## Known stack suffix:
## LET ID COLON ty ASSIGN ID LBRACE struct_fields
## LR(1) items:
stmt_item -> LET ID COLON ty ASSIGN ID LBRACE struct_fields . RBRACE [ SEMICOLON RBRACE ]
## Transitions:
-- On RBRACE shift to state 168
## Reductions:

State 168:
## Known stack suffix:
## LET ID COLON ty ASSIGN ID LBRACE struct_fields RBRACE
## LR(1) items:
stmt_item -> LET ID COLON ty ASSIGN ID LBRACE struct_fields RBRACE . [ SEMICOLON RBRACE ]
## Transitions:
## Reductions:
-- On SEMICOLON RBRACE
--   reduce production stmt_item -> LET ID COLON ty ASSIGN ID LBRACE struct_fields RBRACE

State 169:
## Known stack suffix:
## LET ID COLON ty ASSIGN expr
## LR(1) items:
expr -> expr . DOT ID [ SUBS SEMICOLON RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
expr -> expr . ASSIGN expr [ SUBS SEMICOLON RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
expr -> expr . ADD expr [ SUBS SEMICOLON RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
expr -> expr . SUBS expr [ SUBS SEMICOLON RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
expr -> expr . ASTERISK expr [ SUBS SEMICOLON RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
expr -> expr . DIV expr [ SUBS SEMICOLON RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
expr -> expr . LE expr [ SUBS SEMICOLON RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
expr -> expr . GE expr [ SUBS SEMICOLON RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
expr -> expr . RANGLE expr [ SUBS SEMICOLON RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
expr -> expr . LANGLE expr [ SUBS SEMICOLON RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
expr -> expr . EQ expr [ SUBS SEMICOLON RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
expr -> expr . NE expr [ SUBS SEMICOLON RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
expr -> expr . OR expr [ SUBS SEMICOLON RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
expr -> expr . AND expr [ SUBS SEMICOLON RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
expr -> expr . LPAREN args_expr RPAREN [ SUBS SEMICOLON RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
stmt_item -> LET ID COLON ty ASSIGN expr . [ SEMICOLON RBRACE ]
## Transitions:
-- On SUBS shift to state 92
-- On RANGLE shift to state 100
-- On OR shift to state 104
-- On NE shift to state 106
-- On LPAREN shift to state 90
-- On LE shift to state 108
-- On LANGLE shift to state 110
-- On GE shift to state 112
-- On EQ shift to state 114
-- On DOT shift to state 94
-- On DIV shift to state 96
-- On ASTERISK shift to state 98
-- On ASSIGN shift to state 118
-- On AND shift to state 120
-- On ADD shift to state 102
## Reductions:
-- On SEMICOLON RBRACE
--   reduce production stmt_item -> LET ID COLON ty ASSIGN expr

State 170:
## Known stack suffix:
## LBRACE
## LR(1) items:
stmt -> LBRACE . stmt RBRACE stmt [ RBRACE ]
## Transitions:
-- On WHILE shift to state 71
-- On TRUE shift to state 72
-- On SUBS shift to state 73
-- On STR_LITERAL shift to state 74
-- On RETURN shift to state 137
-- On REF shift to state 75
-- On NOT shift to state 76
-- On MATCH shift to state 139
-- On LPAREN shift to state 77
-- On LOOP shift to state 153
-- On LET shift to state 155
-- On LBRACE shift to state 170
-- On INT shift to state 79
-- On IF shift to state 171
-- On ID shift to state 80
-- On FALSE shift to state 84
-- On CONTINUE shift to state 174
-- On BREAK shift to state 175
-- On BOX shift to state 85
-- On ASTERISK shift to state 87
-- On stmt_item shift to state 176
-- On stmt shift to state 193
-- On path_expr shift to state 88
-- On expr shift to state 179
## Reductions:
-- On SEMICOLON RBRACE
--   reduce production stmt_item ->

State 171:
## Known stack suffix:
## IF
## LR(1) items:
stmt -> IF . expr LBRACE stmt RBRACE ELSE LBRACE stmt RBRACE stmt [ RBRACE ]
stmt -> IF . expr LBRACE stmt RBRACE stmt [ RBRACE ]
## Transitions:
-- On TRUE shift to state 72
-- On SUBS shift to state 73
-- On STR_LITERAL shift to state 74
-- On REF shift to state 75
-- On NOT shift to state 76
-- On LPAREN shift to state 77
-- On INT shift to state 79
-- On ID shift to state 80
-- On FALSE shift to state 84
-- On BOX shift to state 85
-- On ASTERISK shift to state 87
-- On path_expr shift to state 88
-- On expr shift to state 172
## Reductions:

State 172:
## Known stack suffix:
## IF expr
## LR(1) items:
expr -> expr . DOT ID [ SUBS RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
expr -> expr . ASSIGN expr [ SUBS RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
expr -> expr . ADD expr [ SUBS RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
expr -> expr . SUBS expr [ SUBS RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
expr -> expr . ASTERISK expr [ SUBS RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
expr -> expr . DIV expr [ SUBS RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
expr -> expr . LE expr [ SUBS RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
expr -> expr . GE expr [ SUBS RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
expr -> expr . RANGLE expr [ SUBS RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
expr -> expr . LANGLE expr [ SUBS RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
expr -> expr . EQ expr [ SUBS RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
expr -> expr . NE expr [ SUBS RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
expr -> expr . OR expr [ SUBS RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
expr -> expr . AND expr [ SUBS RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
expr -> expr . LPAREN args_expr RPAREN [ SUBS RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
stmt -> IF expr . LBRACE stmt RBRACE ELSE LBRACE stmt RBRACE stmt [ RBRACE ]
stmt -> IF expr . LBRACE stmt RBRACE stmt [ RBRACE ]
## Transitions:
-- On SUBS shift to state 92
-- On RANGLE shift to state 100
-- On OR shift to state 104
-- On NE shift to state 106
-- On LPAREN shift to state 90
-- On LE shift to state 108
-- On LBRACE shift to state 173
-- On LANGLE shift to state 110
-- On GE shift to state 112
-- On EQ shift to state 114
-- On DOT shift to state 94
-- On DIV shift to state 96
-- On ASTERISK shift to state 98
-- On ASSIGN shift to state 118
-- On AND shift to state 120
-- On ADD shift to state 102
## Reductions:

State 173:
## Known stack suffix:
## IF expr LBRACE
## LR(1) items:
stmt -> IF expr LBRACE . stmt RBRACE ELSE LBRACE stmt RBRACE stmt [ RBRACE ]
stmt -> IF expr LBRACE . stmt RBRACE stmt [ RBRACE ]
## Transitions:
-- On WHILE shift to state 71
-- On TRUE shift to state 72
-- On SUBS shift to state 73
-- On STR_LITERAL shift to state 74
-- On RETURN shift to state 137
-- On REF shift to state 75
-- On NOT shift to state 76
-- On MATCH shift to state 139
-- On LPAREN shift to state 77
-- On LOOP shift to state 153
-- On LET shift to state 155
-- On LBRACE shift to state 170
-- On INT shift to state 79
-- On IF shift to state 171
-- On ID shift to state 80
-- On FALSE shift to state 84
-- On CONTINUE shift to state 174
-- On BREAK shift to state 175
-- On BOX shift to state 85
-- On ASTERISK shift to state 87
-- On stmt_item shift to state 176
-- On stmt shift to state 185
-- On path_expr shift to state 88
-- On expr shift to state 179
## Reductions:
-- On SEMICOLON RBRACE
--   reduce production stmt_item ->

State 174:
## Known stack suffix:
## CONTINUE
## LR(1) items:
stmt_item -> CONTINUE . [ SEMICOLON RBRACE ]
## Transitions:
## Reductions:
-- On SEMICOLON RBRACE
--   reduce production stmt_item -> CONTINUE

State 175:
## Known stack suffix:
## BREAK
## LR(1) items:
stmt_item -> BREAK . [ SEMICOLON RBRACE ]
## Transitions:
## Reductions:
-- On SEMICOLON RBRACE
--   reduce production stmt_item -> BREAK

State 176:
## Known stack suffix:
## stmt_item
## LR(1) items:
stmt -> stmt_item . [ RBRACE ]
stmt -> stmt_item . SEMICOLON stmt [ RBRACE ]
## Transitions:
-- On SEMICOLON shift to state 177
## Reductions:
-- On RBRACE
--   reduce production stmt -> stmt_item

State 177:
## Known stack suffix:
## stmt_item SEMICOLON
## LR(1) items:
stmt -> stmt_item SEMICOLON . stmt [ RBRACE ]
## Transitions:
-- On WHILE shift to state 71
-- On TRUE shift to state 72
-- On SUBS shift to state 73
-- On STR_LITERAL shift to state 74
-- On RETURN shift to state 137
-- On REF shift to state 75
-- On NOT shift to state 76
-- On MATCH shift to state 139
-- On LPAREN shift to state 77
-- On LOOP shift to state 153
-- On LET shift to state 155
-- On LBRACE shift to state 170
-- On INT shift to state 79
-- On IF shift to state 171
-- On ID shift to state 80
-- On FALSE shift to state 84
-- On CONTINUE shift to state 174
-- On BREAK shift to state 175
-- On BOX shift to state 85
-- On ASTERISK shift to state 87
-- On stmt_item shift to state 176
-- On stmt shift to state 178
-- On path_expr shift to state 88
-- On expr shift to state 179
## Reductions:
-- On SEMICOLON RBRACE
--   reduce production stmt_item ->

State 178:
## Known stack suffix:
## stmt_item SEMICOLON stmt
## LR(1) items:
stmt -> stmt_item SEMICOLON stmt . [ RBRACE ]
## Transitions:
## Reductions:
-- On RBRACE
--   reduce production stmt -> stmt_item SEMICOLON stmt

State 179:
## Known stack suffix:
## expr
## LR(1) items:
expr -> expr . DOT ID [ SUBS SEMICOLON RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
expr -> expr . ASSIGN expr [ SUBS SEMICOLON RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
expr -> expr . ADD expr [ SUBS SEMICOLON RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
expr -> expr . SUBS expr [ SUBS SEMICOLON RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
expr -> expr . ASTERISK expr [ SUBS SEMICOLON RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
expr -> expr . DIV expr [ SUBS SEMICOLON RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
expr -> expr . LE expr [ SUBS SEMICOLON RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
expr -> expr . GE expr [ SUBS SEMICOLON RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
expr -> expr . RANGLE expr [ SUBS SEMICOLON RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
expr -> expr . LANGLE expr [ SUBS SEMICOLON RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
expr -> expr . EQ expr [ SUBS SEMICOLON RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
expr -> expr . NE expr [ SUBS SEMICOLON RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
expr -> expr . OR expr [ SUBS SEMICOLON RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
expr -> expr . AND expr [ SUBS SEMICOLON RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
expr -> expr . LPAREN args_expr RPAREN [ SUBS SEMICOLON RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
stmt_item -> expr . [ SEMICOLON RBRACE ]
stmt_item -> expr . ASSIGN ID LBRACE struct_fields RBRACE [ SEMICOLON RBRACE ]
## Transitions:
-- On SUBS shift to state 92
-- On RANGLE shift to state 100
-- On OR shift to state 104
-- On NE shift to state 106
-- On LPAREN shift to state 90
-- On LE shift to state 108
-- On LANGLE shift to state 110
-- On GE shift to state 112
-- On EQ shift to state 114
-- On DOT shift to state 94
-- On DIV shift to state 96
-- On ASTERISK shift to state 98
-- On ASSIGN shift to state 180
-- On AND shift to state 120
-- On ADD shift to state 102
## Reductions:
-- On SEMICOLON RBRACE
--   reduce production stmt_item -> expr

State 180:
## Known stack suffix:
## expr ASSIGN
## LR(1) items:
expr -> expr ASSIGN . expr [ SUBS SEMICOLON RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
stmt_item -> expr ASSIGN . ID LBRACE struct_fields RBRACE [ SEMICOLON RBRACE ]
## Transitions:
-- On TRUE shift to state 72
-- On SUBS shift to state 73
-- On STR_LITERAL shift to state 74
-- On REF shift to state 75
-- On NOT shift to state 76
-- On LPAREN shift to state 77
-- On INT shift to state 79
-- On ID shift to state 181
-- On FALSE shift to state 84
-- On BOX shift to state 85
-- On ASTERISK shift to state 87
-- On path_expr shift to state 88
-- On expr shift to state 119
## Reductions:

State 181:
## Known stack suffix:
## expr ASSIGN ID
## LR(1) items:
expr -> ID . [ SUBS SEMICOLON RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
expr -> ID . COLON2 ID LPAREN expr RPAREN [ SUBS SEMICOLON RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
path_expr -> ID . COLON2 ID [ SUBS SEMICOLON RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]
stmt_item -> expr ASSIGN ID . LBRACE struct_fields RBRACE [ SEMICOLON RBRACE ]
## Transitions:
-- On LBRACE shift to state 182
-- On COLON2 shift to state 81
## Reductions:
-- On SUBS SEMICOLON RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD
--   reduce production expr -> ID

State 182:
## Known stack suffix:
## expr ASSIGN ID LBRACE
## LR(1) items:
stmt_item -> expr ASSIGN ID LBRACE . struct_fields RBRACE [ SEMICOLON RBRACE ]
## Transitions:
-- On ID shift to state 162
-- On struct_fields shift to state 183
## Reductions:
-- On RBRACE
--   reduce production struct_fields ->

State 183:
## Known stack suffix:
## expr ASSIGN ID LBRACE struct_fields
## LR(1) items:
stmt_item -> expr ASSIGN ID LBRACE struct_fields . RBRACE [ SEMICOLON RBRACE ]
## Transitions:
-- On RBRACE shift to state 184
## Reductions:

State 184:
## Known stack suffix:
## expr ASSIGN ID LBRACE struct_fields RBRACE
## LR(1) items:
stmt_item -> expr ASSIGN ID LBRACE struct_fields RBRACE . [ SEMICOLON RBRACE ]
## Transitions:
## Reductions:
-- On SEMICOLON RBRACE
--   reduce production stmt_item -> expr ASSIGN ID LBRACE struct_fields RBRACE

State 185:
## Known stack suffix:
## IF expr LBRACE stmt
## LR(1) items:
stmt -> IF expr LBRACE stmt . RBRACE ELSE LBRACE stmt RBRACE stmt [ RBRACE ]
stmt -> IF expr LBRACE stmt . RBRACE stmt [ RBRACE ]
## Transitions:
-- On RBRACE shift to state 186
## Reductions:

State 186:
## Known stack suffix:
## IF expr LBRACE stmt RBRACE
## LR(1) items:
stmt -> IF expr LBRACE stmt RBRACE . ELSE LBRACE stmt RBRACE stmt [ RBRACE ]
stmt -> IF expr LBRACE stmt RBRACE . stmt [ RBRACE ]
## Transitions:
-- On WHILE shift to state 71
-- On TRUE shift to state 72
-- On SUBS shift to state 73
-- On STR_LITERAL shift to state 74
-- On RETURN shift to state 137
-- On REF shift to state 75
-- On NOT shift to state 76
-- On MATCH shift to state 139
-- On LPAREN shift to state 77
-- On LOOP shift to state 153
-- On LET shift to state 155
-- On LBRACE shift to state 170
-- On INT shift to state 79
-- On IF shift to state 171
-- On ID shift to state 80
-- On FALSE shift to state 84
-- On ELSE shift to state 187
-- On CONTINUE shift to state 174
-- On BREAK shift to state 175
-- On BOX shift to state 85
-- On ASTERISK shift to state 87
-- On stmt_item shift to state 176
-- On stmt shift to state 192
-- On path_expr shift to state 88
-- On expr shift to state 179
## Reductions:
-- On SEMICOLON RBRACE
--   reduce production stmt_item ->

State 187:
## Known stack suffix:
## IF expr LBRACE stmt RBRACE ELSE
## LR(1) items:
stmt -> IF expr LBRACE stmt RBRACE ELSE . LBRACE stmt RBRACE stmt [ RBRACE ]
## Transitions:
-- On LBRACE shift to state 188
## Reductions:

State 188:
## Known stack suffix:
## IF expr LBRACE stmt RBRACE ELSE LBRACE
## LR(1) items:
stmt -> IF expr LBRACE stmt RBRACE ELSE LBRACE . stmt RBRACE stmt [ RBRACE ]
## Transitions:
-- On WHILE shift to state 71
-- On TRUE shift to state 72
-- On SUBS shift to state 73
-- On STR_LITERAL shift to state 74
-- On RETURN shift to state 137
-- On REF shift to state 75
-- On NOT shift to state 76
-- On MATCH shift to state 139
-- On LPAREN shift to state 77
-- On LOOP shift to state 153
-- On LET shift to state 155
-- On LBRACE shift to state 170
-- On INT shift to state 79
-- On IF shift to state 171
-- On ID shift to state 80
-- On FALSE shift to state 84
-- On CONTINUE shift to state 174
-- On BREAK shift to state 175
-- On BOX shift to state 85
-- On ASTERISK shift to state 87
-- On stmt_item shift to state 176
-- On stmt shift to state 189
-- On path_expr shift to state 88
-- On expr shift to state 179
## Reductions:
-- On SEMICOLON RBRACE
--   reduce production stmt_item ->

State 189:
## Known stack suffix:
## IF expr LBRACE stmt RBRACE ELSE LBRACE stmt
## LR(1) items:
stmt -> IF expr LBRACE stmt RBRACE ELSE LBRACE stmt . RBRACE stmt [ RBRACE ]
## Transitions:
-- On RBRACE shift to state 190
## Reductions:

State 190:
## Known stack suffix:
## IF expr LBRACE stmt RBRACE ELSE LBRACE stmt RBRACE
## LR(1) items:
stmt -> IF expr LBRACE stmt RBRACE ELSE LBRACE stmt RBRACE . stmt [ RBRACE ]
## Transitions:
-- On WHILE shift to state 71
-- On TRUE shift to state 72
-- On SUBS shift to state 73
-- On STR_LITERAL shift to state 74
-- On RETURN shift to state 137
-- On REF shift to state 75
-- On NOT shift to state 76
-- On MATCH shift to state 139
-- On LPAREN shift to state 77
-- On LOOP shift to state 153
-- On LET shift to state 155
-- On LBRACE shift to state 170
-- On INT shift to state 79
-- On IF shift to state 171
-- On ID shift to state 80
-- On FALSE shift to state 84
-- On CONTINUE shift to state 174
-- On BREAK shift to state 175
-- On BOX shift to state 85
-- On ASTERISK shift to state 87
-- On stmt_item shift to state 176
-- On stmt shift to state 191
-- On path_expr shift to state 88
-- On expr shift to state 179
## Reductions:
-- On SEMICOLON RBRACE
--   reduce production stmt_item ->

State 191:
## Known stack suffix:
## IF expr LBRACE stmt RBRACE ELSE LBRACE stmt RBRACE stmt
## LR(1) items:
stmt -> IF expr LBRACE stmt RBRACE ELSE LBRACE stmt RBRACE stmt . [ RBRACE ]
## Transitions:
## Reductions:
-- On RBRACE
--   reduce production stmt -> IF expr LBRACE stmt RBRACE ELSE LBRACE stmt RBRACE stmt

State 192:
## Known stack suffix:
## IF expr LBRACE stmt RBRACE stmt
## LR(1) items:
stmt -> IF expr LBRACE stmt RBRACE stmt . [ RBRACE ]
## Transitions:
## Reductions:
-- On RBRACE
--   reduce production stmt -> IF expr LBRACE stmt RBRACE stmt

State 193:
## Known stack suffix:
## LBRACE stmt
## LR(1) items:
stmt -> LBRACE stmt . RBRACE stmt [ RBRACE ]
## Transitions:
-- On RBRACE shift to state 194
## Reductions:

State 194:
## Known stack suffix:
## LBRACE stmt RBRACE
## LR(1) items:
stmt -> LBRACE stmt RBRACE . stmt [ RBRACE ]
## Transitions:
-- On WHILE shift to state 71
-- On TRUE shift to state 72
-- On SUBS shift to state 73
-- On STR_LITERAL shift to state 74
-- On RETURN shift to state 137
-- On REF shift to state 75
-- On NOT shift to state 76
-- On MATCH shift to state 139
-- On LPAREN shift to state 77
-- On LOOP shift to state 153
-- On LET shift to state 155
-- On LBRACE shift to state 170
-- On INT shift to state 79
-- On IF shift to state 171
-- On ID shift to state 80
-- On FALSE shift to state 84
-- On CONTINUE shift to state 174
-- On BREAK shift to state 175
-- On BOX shift to state 85
-- On ASTERISK shift to state 87
-- On stmt_item shift to state 176
-- On stmt shift to state 195
-- On path_expr shift to state 88
-- On expr shift to state 179
## Reductions:
-- On SEMICOLON RBRACE
--   reduce production stmt_item ->

State 195:
## Known stack suffix:
## LBRACE stmt RBRACE stmt
## LR(1) items:
stmt -> LBRACE stmt RBRACE stmt . [ RBRACE ]
## Transitions:
## Reductions:
-- On RBRACE
--   reduce production stmt -> LBRACE stmt RBRACE stmt

State 196:
## Known stack suffix:
## LOOP LBRACE stmt
## LR(1) items:
stmt -> LOOP LBRACE stmt . RBRACE stmt [ RBRACE ]
## Transitions:
-- On RBRACE shift to state 197
## Reductions:

State 197:
## Known stack suffix:
## LOOP LBRACE stmt RBRACE
## LR(1) items:
stmt -> LOOP LBRACE stmt RBRACE . stmt [ RBRACE ]
## Transitions:
-- On WHILE shift to state 71
-- On TRUE shift to state 72
-- On SUBS shift to state 73
-- On STR_LITERAL shift to state 74
-- On RETURN shift to state 137
-- On REF shift to state 75
-- On NOT shift to state 76
-- On MATCH shift to state 139
-- On LPAREN shift to state 77
-- On LOOP shift to state 153
-- On LET shift to state 155
-- On LBRACE shift to state 170
-- On INT shift to state 79
-- On IF shift to state 171
-- On ID shift to state 80
-- On FALSE shift to state 84
-- On CONTINUE shift to state 174
-- On BREAK shift to state 175
-- On BOX shift to state 85
-- On ASTERISK shift to state 87
-- On stmt_item shift to state 176
-- On stmt shift to state 198
-- On path_expr shift to state 88
-- On expr shift to state 179
## Reductions:
-- On SEMICOLON RBRACE
--   reduce production stmt_item ->

State 198:
## Known stack suffix:
## LOOP LBRACE stmt RBRACE stmt
## LR(1) items:
stmt -> LOOP LBRACE stmt RBRACE stmt . [ RBRACE ]
## Transitions:
## Reductions:
-- On RBRACE
--   reduce production stmt -> LOOP LBRACE stmt RBRACE stmt

State 199:
## Known stack suffix:
## pattern RARROWW LBRACE stmt
## LR(1) items:
match_arm -> pattern RARROWW LBRACE stmt . RBRACE [ RBRACE PREF ID ]
## Transitions:
-- On RBRACE shift to state 200
## Reductions:

State 200:
## Known stack suffix:
## pattern RARROWW LBRACE stmt RBRACE
## LR(1) items:
match_arm -> pattern RARROWW LBRACE stmt RBRACE . [ RBRACE PREF ID ]
## Transitions:
## Reductions:
-- On RBRACE PREF ID
--   reduce production match_arm -> pattern RARROWW LBRACE stmt RBRACE

State 201:
## Known stack suffix:
## path_pattern
## LR(1) items:
pattern -> path_pattern . [ RPAREN RARROWW COMMA ]
## Transitions:
## Reductions:
-- On RPAREN RARROWW COMMA
--   reduce production pattern -> path_pattern

State 202:
## Known stack suffix:
## path_expr
## LR(1) items:
path_pattern -> path_expr . [ RPAREN RARROWW COMMA ]
tuple_struct_pattern -> path_expr . LPAREN args_pattern RPAREN [ RPAREN RARROWW COMMA ]
## Transitions:
-- On LPAREN shift to state 203
## Reductions:
-- On RPAREN RARROWW COMMA
--   reduce production path_pattern -> path_expr

State 203:
## Known stack suffix:
## path_expr LPAREN
## LR(1) items:
tuple_struct_pattern -> path_expr LPAREN . args_pattern RPAREN [ RPAREN RARROWW COMMA ]
## Transitions:
-- On PREF shift to state 142
-- On ID shift to state 146
-- On tuple_struct_pattern shift to state 149
-- On pattern shift to state 204
-- On path_pattern shift to state 201
-- On path_expr shift to state 202
-- On identifier_pattern shift to state 206
-- On args_pattern shift to state 208
## Reductions:
-- On RPAREN
--   reduce production args_pattern ->

State 204:
## Known stack suffix:
## pattern
## LR(1) items:
args_pattern -> pattern . [ RPAREN ]
args_pattern -> pattern . COMMA args_pattern [ RPAREN ]
## Transitions:
-- On COMMA shift to state 205
## Reductions:
-- On RPAREN
--   reduce production args_pattern -> pattern

State 205:
## Known stack suffix:
## pattern COMMA
## LR(1) items:
args_pattern -> pattern COMMA . args_pattern [ RPAREN ]
## Transitions:
-- On PREF shift to state 142
-- On ID shift to state 146
-- On tuple_struct_pattern shift to state 149
-- On pattern shift to state 204
-- On path_pattern shift to state 201
-- On path_expr shift to state 202
-- On identifier_pattern shift to state 206
-- On args_pattern shift to state 207
## Reductions:
-- On RPAREN
--   reduce production args_pattern ->

State 206:
## Known stack suffix:
## identifier_pattern
## LR(1) items:
pattern -> identifier_pattern . [ RPAREN RARROWW COMMA ]
## Transitions:
## Reductions:
-- On RPAREN RARROWW COMMA
--   reduce production pattern -> identifier_pattern

State 207:
## Known stack suffix:
## pattern COMMA args_pattern
## LR(1) items:
args_pattern -> pattern COMMA args_pattern . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production args_pattern -> pattern COMMA args_pattern

State 208:
## Known stack suffix:
## path_expr LPAREN args_pattern
## LR(1) items:
tuple_struct_pattern -> path_expr LPAREN args_pattern . RPAREN [ RPAREN RARROWW COMMA ]
## Transitions:
-- On RPAREN shift to state 209
## Reductions:

State 209:
## Known stack suffix:
## path_expr LPAREN args_pattern RPAREN
## LR(1) items:
tuple_struct_pattern -> path_expr LPAREN args_pattern RPAREN . [ RPAREN RARROWW COMMA ]
## Transitions:
## Reductions:
-- On RPAREN RARROWW COMMA
--   reduce production tuple_struct_pattern -> path_expr LPAREN args_pattern RPAREN

State 210:
## Known stack suffix:
## MATCH expr LBRACE match_arms
## LR(1) items:
stmt_item -> MATCH expr LBRACE match_arms . RBRACE [ SEMICOLON RBRACE ]
## Transitions:
-- On RBRACE shift to state 211
## Reductions:

State 211:
## Known stack suffix:
## MATCH expr LBRACE match_arms RBRACE
## LR(1) items:
stmt_item -> MATCH expr LBRACE match_arms RBRACE . [ SEMICOLON RBRACE ]
## Transitions:
## Reductions:
-- On SEMICOLON RBRACE
--   reduce production stmt_item -> MATCH expr LBRACE match_arms RBRACE

State 212:
## Known stack suffix:
## match_arm
## LR(1) items:
match_arms -> match_arm . [ RBRACE ]
match_arms -> match_arm . match_arms [ RBRACE ]
## Transitions:
-- On PREF shift to state 142
-- On ID shift to state 146
-- On tuple_struct_pattern shift to state 149
-- On pattern shift to state 150
-- On path_pattern shift to state 201
-- On path_expr shift to state 202
-- On match_arms shift to state 213
-- On match_arm shift to state 212
-- On identifier_pattern shift to state 206
## Reductions:
-- On RBRACE
--   reduce production match_arms -> match_arm

State 213:
## Known stack suffix:
## match_arm match_arms
## LR(1) items:
match_arms -> match_arm match_arms . [ RBRACE ]
## Transitions:
## Reductions:
-- On RBRACE
--   reduce production match_arms -> match_arm match_arms

State 214:
## Known stack suffix:
## WHILE expr LBRACE stmt
## LR(1) items:
stmt -> WHILE expr LBRACE stmt . RBRACE stmt [ RBRACE ]
## Transitions:
-- On RBRACE shift to state 215
## Reductions:

State 215:
## Known stack suffix:
## WHILE expr LBRACE stmt RBRACE
## LR(1) items:
stmt -> WHILE expr LBRACE stmt RBRACE . stmt [ RBRACE ]
## Transitions:
-- On WHILE shift to state 71
-- On TRUE shift to state 72
-- On SUBS shift to state 73
-- On STR_LITERAL shift to state 74
-- On RETURN shift to state 137
-- On REF shift to state 75
-- On NOT shift to state 76
-- On MATCH shift to state 139
-- On LPAREN shift to state 77
-- On LOOP shift to state 153
-- On LET shift to state 155
-- On LBRACE shift to state 170
-- On INT shift to state 79
-- On IF shift to state 171
-- On ID shift to state 80
-- On FALSE shift to state 84
-- On CONTINUE shift to state 174
-- On BREAK shift to state 175
-- On BOX shift to state 85
-- On ASTERISK shift to state 87
-- On stmt_item shift to state 176
-- On stmt shift to state 216
-- On path_expr shift to state 88
-- On expr shift to state 179
## Reductions:
-- On SEMICOLON RBRACE
--   reduce production stmt_item ->

State 216:
## Known stack suffix:
## WHILE expr LBRACE stmt RBRACE stmt
## LR(1) items:
stmt -> WHILE expr LBRACE stmt RBRACE stmt . [ RBRACE ]
## Transitions:
## Reductions:
-- On RBRACE
--   reduce production stmt -> WHILE expr LBRACE stmt RBRACE stmt

State 217:
## Known stack suffix:
## FN ID generic_origins LPAREN composite_fields RPAREN RARROW ty origin_relations LBRACE stmt
## LR(1) items:
fn -> FN ID generic_origins LPAREN composite_fields RPAREN RARROW ty origin_relations LBRACE stmt . RBRACE [ STRUCT FN EOF ENUM ]
## Transitions:
-- On RBRACE shift to state 218
## Reductions:

State 218:
## Known stack suffix:
## FN ID generic_origins LPAREN composite_fields RPAREN RARROW ty origin_relations LBRACE stmt RBRACE
## LR(1) items:
fn -> FN ID generic_origins LPAREN composite_fields RPAREN RARROW ty origin_relations LBRACE stmt RBRACE . [ STRUCT FN EOF ENUM ]
## Transitions:
## Reductions:
-- On STRUCT FN EOF ENUM
--   reduce production fn -> FN ID generic_origins LPAREN composite_fields RPAREN RARROW ty origin_relations LBRACE stmt RBRACE

State 219:
## Known stack suffix:
## FN ID generic_origins LPAREN composite_fields RPAREN origin_relations
## LR(1) items:
fn -> FN ID generic_origins LPAREN composite_fields RPAREN origin_relations . LBRACE stmt RBRACE [ STRUCT FN EOF ENUM ]
## Transitions:
-- On LBRACE shift to state 220
## Reductions:

State 220:
## Known stack suffix:
## FN ID generic_origins LPAREN composite_fields RPAREN origin_relations LBRACE
## LR(1) items:
fn -> FN ID generic_origins LPAREN composite_fields RPAREN origin_relations LBRACE . stmt RBRACE [ STRUCT FN EOF ENUM ]
## Transitions:
-- On WHILE shift to state 71
-- On TRUE shift to state 72
-- On SUBS shift to state 73
-- On STR_LITERAL shift to state 74
-- On RETURN shift to state 137
-- On REF shift to state 75
-- On NOT shift to state 76
-- On MATCH shift to state 139
-- On LPAREN shift to state 77
-- On LOOP shift to state 153
-- On LET shift to state 155
-- On LBRACE shift to state 170
-- On INT shift to state 79
-- On IF shift to state 171
-- On ID shift to state 80
-- On FALSE shift to state 84
-- On CONTINUE shift to state 174
-- On BREAK shift to state 175
-- On BOX shift to state 85
-- On ASTERISK shift to state 87
-- On stmt_item shift to state 176
-- On stmt shift to state 221
-- On path_expr shift to state 88
-- On expr shift to state 179
## Reductions:
-- On SEMICOLON RBRACE
--   reduce production stmt_item ->

State 221:
## Known stack suffix:
## FN ID generic_origins LPAREN composite_fields RPAREN origin_relations LBRACE stmt
## LR(1) items:
fn -> FN ID generic_origins LPAREN composite_fields RPAREN origin_relations LBRACE stmt . RBRACE [ STRUCT FN EOF ENUM ]
## Transitions:
-- On RBRACE shift to state 222
## Reductions:

State 222:
## Known stack suffix:
## FN ID generic_origins LPAREN composite_fields RPAREN origin_relations LBRACE stmt RBRACE
## LR(1) items:
fn -> FN ID generic_origins LPAREN composite_fields RPAREN origin_relations LBRACE stmt RBRACE . [ STRUCT FN EOF ENUM ]
## Transitions:
## Reductions:
-- On STRUCT FN EOF ENUM
--   reduce production fn -> FN ID generic_origins LPAREN composite_fields RPAREN origin_relations LBRACE stmt RBRACE

State 223:
## Known stack suffix:
## ENUM
## LR(1) items:
enum -> ENUM . ID generic_origins origin_relations LBRACE enum_fields RBRACE [ STRUCT FN EOF ENUM ]
enum_decl -> ENUM . ID generic_origins origin_relations SEMICOLON [ STRUCT FN EOF ENUM ]
## Transitions:
-- On ID shift to state 224
## Reductions:

State 224:
## Known stack suffix:
## ENUM ID
## LR(1) items:
enum -> ENUM ID . generic_origins origin_relations LBRACE enum_fields RBRACE [ STRUCT FN EOF ENUM ]
enum_decl -> ENUM ID . generic_origins origin_relations SEMICOLON [ STRUCT FN EOF ENUM ]
## Transitions:
-- On LANGLE shift to state 3
-- On generic_origins shift to state 225
## Reductions:
-- On WHERE SEMICOLON LBRACE
--   reduce production generic_origins ->

State 225:
## Known stack suffix:
## ENUM ID generic_origins
## LR(1) items:
enum -> ENUM ID generic_origins . origin_relations LBRACE enum_fields RBRACE [ STRUCT FN EOF ENUM ]
enum_decl -> ENUM ID generic_origins . origin_relations SEMICOLON [ STRUCT FN EOF ENUM ]
## Transitions:
-- On WHERE shift to state 10
-- On origin_relations shift to state 226
## Reductions:
-- On SEMICOLON LBRACE
--   reduce production origin_relations ->

State 226:
## Known stack suffix:
## ENUM ID generic_origins origin_relations
## LR(1) items:
enum -> ENUM ID generic_origins origin_relations . LBRACE enum_fields RBRACE [ STRUCT FN EOF ENUM ]
enum_decl -> ENUM ID generic_origins origin_relations . SEMICOLON [ STRUCT FN EOF ENUM ]
## Transitions:
-- On SEMICOLON shift to state 227
-- On LBRACE shift to state 228
## Reductions:

State 227:
## Known stack suffix:
## ENUM ID generic_origins origin_relations SEMICOLON
## LR(1) items:
enum_decl -> ENUM ID generic_origins origin_relations SEMICOLON . [ STRUCT FN EOF ENUM ]
## Transitions:
## Reductions:
-- On STRUCT FN EOF ENUM
--   reduce production enum_decl -> ENUM ID generic_origins origin_relations SEMICOLON

State 228:
## Known stack suffix:
## ENUM ID generic_origins origin_relations LBRACE
## LR(1) items:
enum -> ENUM ID generic_origins origin_relations LBRACE . enum_fields RBRACE [ STRUCT FN EOF ENUM ]
## Transitions:
-- On ID shift to state 229
-- On enum_fields shift to state 240
## Reductions:

State 229:
## Known stack suffix:
## ID
## LR(1) items:
enum_fields -> ID . [ RBRACE ]
enum_fields -> ID . COMMA enum_fields [ RBRACE ]
enum_fields -> ID . LPAREN non_empty_ty_sequence RPAREN [ RBRACE ]
enum_fields -> ID . LPAREN non_empty_ty_sequence RPAREN COMMA enum_fields [ RBRACE ]
## Transitions:
-- On LPAREN shift to state 230
-- On COMMA shift to state 238
## Reductions:
-- On RBRACE
--   reduce production enum_fields -> ID

State 230:
## Known stack suffix:
## ID LPAREN
## LR(1) items:
enum_fields -> ID LPAREN . non_empty_ty_sequence RPAREN [ RBRACE ]
enum_fields -> ID LPAREN . non_empty_ty_sequence RPAREN COMMA enum_fields [ RBRACE ]
## Transitions:
-- On UINT8 shift to state 22
-- On UINT32 shift to state 23
-- On UINT16 shift to state 24
-- On REF shift to state 25
-- On LPAREN shift to state 29
-- On INT8 shift to state 31
-- On INT32 shift to state 32
-- On INT16 shift to state 33
-- On ID shift to state 34
-- On FN shift to state 36
-- On FLOAT64 shift to state 39
-- On FLOAT32 shift to state 40
-- On BOX shift to state 41
-- On BOOL shift to state 43
-- On ty shift to state 231
-- On non_empty_ty_sequence shift to state 234
## Reductions:

State 231:
## Known stack suffix:
## ty
## LR(1) items:
non_empty_ty_sequence -> ty . [ RPAREN ]
non_empty_ty_sequence -> ty . COMMA non_empty_ty_sequence [ RPAREN ]
## Transitions:
-- On COMMA shift to state 232
## Reductions:
-- On RPAREN
--   reduce production non_empty_ty_sequence -> ty

State 232:
## Known stack suffix:
## ty COMMA
## LR(1) items:
non_empty_ty_sequence -> ty COMMA . non_empty_ty_sequence [ RPAREN ]
## Transitions:
-- On UINT8 shift to state 22
-- On UINT32 shift to state 23
-- On UINT16 shift to state 24
-- On REF shift to state 25
-- On LPAREN shift to state 29
-- On INT8 shift to state 31
-- On INT32 shift to state 32
-- On INT16 shift to state 33
-- On ID shift to state 34
-- On FN shift to state 36
-- On FLOAT64 shift to state 39
-- On FLOAT32 shift to state 40
-- On BOX shift to state 41
-- On BOOL shift to state 43
-- On ty shift to state 231
-- On non_empty_ty_sequence shift to state 233
## Reductions:

State 233:
## Known stack suffix:
## ty COMMA non_empty_ty_sequence
## LR(1) items:
non_empty_ty_sequence -> ty COMMA non_empty_ty_sequence . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production non_empty_ty_sequence -> ty COMMA non_empty_ty_sequence

State 234:
## Known stack suffix:
## ID LPAREN non_empty_ty_sequence
## LR(1) items:
enum_fields -> ID LPAREN non_empty_ty_sequence . RPAREN [ RBRACE ]
enum_fields -> ID LPAREN non_empty_ty_sequence . RPAREN COMMA enum_fields [ RBRACE ]
## Transitions:
-- On RPAREN shift to state 235
## Reductions:

State 235:
## Known stack suffix:
## ID LPAREN non_empty_ty_sequence RPAREN
## LR(1) items:
enum_fields -> ID LPAREN non_empty_ty_sequence RPAREN . [ RBRACE ]
enum_fields -> ID LPAREN non_empty_ty_sequence RPAREN . COMMA enum_fields [ RBRACE ]
## Transitions:
-- On COMMA shift to state 236
## Reductions:
-- On RBRACE
--   reduce production enum_fields -> ID LPAREN non_empty_ty_sequence RPAREN

State 236:
## Known stack suffix:
## ID LPAREN non_empty_ty_sequence RPAREN COMMA
## LR(1) items:
enum_fields -> ID LPAREN non_empty_ty_sequence RPAREN COMMA . enum_fields [ RBRACE ]
## Transitions:
-- On ID shift to state 229
-- On enum_fields shift to state 237
## Reductions:

State 237:
## Known stack suffix:
## ID LPAREN non_empty_ty_sequence RPAREN COMMA enum_fields
## LR(1) items:
enum_fields -> ID LPAREN non_empty_ty_sequence RPAREN COMMA enum_fields . [ RBRACE ]
## Transitions:
## Reductions:
-- On RBRACE
--   reduce production enum_fields -> ID LPAREN non_empty_ty_sequence RPAREN COMMA enum_fields

State 238:
## Known stack suffix:
## ID COMMA
## LR(1) items:
enum_fields -> ID COMMA . enum_fields [ RBRACE ]
## Transitions:
-- On ID shift to state 229
-- On enum_fields shift to state 239
## Reductions:

State 239:
## Known stack suffix:
## ID COMMA enum_fields
## LR(1) items:
enum_fields -> ID COMMA enum_fields . [ RBRACE ]
## Transitions:
## Reductions:
-- On RBRACE
--   reduce production enum_fields -> ID COMMA enum_fields

State 240:
## Known stack suffix:
## ENUM ID generic_origins origin_relations LBRACE enum_fields
## LR(1) items:
enum -> ENUM ID generic_origins origin_relations LBRACE enum_fields . RBRACE [ STRUCT FN EOF ENUM ]
## Transitions:
-- On RBRACE shift to state 241
## Reductions:

State 241:
## Known stack suffix:
## ENUM ID generic_origins origin_relations LBRACE enum_fields RBRACE
## LR(1) items:
enum -> ENUM ID generic_origins origin_relations LBRACE enum_fields RBRACE . [ STRUCT FN EOF ENUM ]
## Transitions:
## Reductions:
-- On STRUCT FN EOF ENUM
--   reduce production enum -> ENUM ID generic_origins origin_relations LBRACE enum_fields RBRACE

State 242:
## Known stack suffix:
## struct_decl
## LR(1) items:
prog -> struct_decl . [ EOF ]
prog -> struct_decl . prog [ EOF ]
## Transitions:
-- On STRUCT shift to state 1
-- On FN shift to state 61
-- On ENUM shift to state 223
-- On struct_decl shift to state 242
-- On struct_ shift to state 243
-- On prog shift to state 251
-- On fn shift to state 245
-- On enum_decl shift to state 247
-- On enum shift to state 249
## Reductions:
-- On EOF
--   reduce production prog -> struct_decl

State 243:
## Known stack suffix:
## struct_
## LR(1) items:
prog -> struct_ . [ EOF ]
prog -> struct_ . prog [ EOF ]
## Transitions:
-- On STRUCT shift to state 1
-- On FN shift to state 61
-- On ENUM shift to state 223
-- On struct_decl shift to state 242
-- On struct_ shift to state 243
-- On prog shift to state 244
-- On fn shift to state 245
-- On enum_decl shift to state 247
-- On enum shift to state 249
## Reductions:
-- On EOF
--   reduce production prog -> struct_

State 244:
## Known stack suffix:
## struct_ prog
## LR(1) items:
prog -> struct_ prog . [ EOF ]
## Transitions:
## Reductions:
-- On EOF
--   reduce production prog -> struct_ prog

State 245:
## Known stack suffix:
## fn
## LR(1) items:
prog -> fn . [ EOF ]
prog -> fn . prog [ EOF ]
## Transitions:
-- On STRUCT shift to state 1
-- On FN shift to state 61
-- On ENUM shift to state 223
-- On struct_decl shift to state 242
-- On struct_ shift to state 243
-- On prog shift to state 246
-- On fn shift to state 245
-- On enum_decl shift to state 247
-- On enum shift to state 249
## Reductions:
-- On EOF
--   reduce production prog -> fn

State 246:
## Known stack suffix:
## fn prog
## LR(1) items:
prog -> fn prog . [ EOF ]
## Transitions:
## Reductions:
-- On EOF
--   reduce production prog -> fn prog

State 247:
## Known stack suffix:
## enum_decl
## LR(1) items:
prog -> enum_decl . [ EOF ]
prog -> enum_decl . prog [ EOF ]
## Transitions:
-- On STRUCT shift to state 1
-- On FN shift to state 61
-- On ENUM shift to state 223
-- On struct_decl shift to state 242
-- On struct_ shift to state 243
-- On prog shift to state 248
-- On fn shift to state 245
-- On enum_decl shift to state 247
-- On enum shift to state 249
## Reductions:
-- On EOF
--   reduce production prog -> enum_decl

State 248:
## Known stack suffix:
## enum_decl prog
## LR(1) items:
prog -> enum_decl prog . [ EOF ]
## Transitions:
## Reductions:
-- On EOF
--   reduce production prog -> enum_decl prog

State 249:
## Known stack suffix:
## enum
## LR(1) items:
prog -> enum . [ EOF ]
prog -> enum . prog [ EOF ]
## Transitions:
-- On STRUCT shift to state 1
-- On FN shift to state 61
-- On ENUM shift to state 223
-- On struct_decl shift to state 242
-- On struct_ shift to state 243
-- On prog shift to state 250
-- On fn shift to state 245
-- On enum_decl shift to state 247
-- On enum shift to state 249
## Reductions:
-- On EOF
--   reduce production prog -> enum

State 250:
## Known stack suffix:
## enum prog
## LR(1) items:
prog -> enum prog . [ EOF ]
## Transitions:
## Reductions:
-- On EOF
--   reduce production prog -> enum prog

State 251:
## Known stack suffix:
## struct_decl prog
## LR(1) items:
prog -> struct_decl prog . [ EOF ]
## Transitions:
## Reductions:
-- On EOF
--   reduce production prog -> struct_decl prog

State 252:
## Known stack suffix:
## prog_eof
## LR(1) items:
prog_eof' -> prog_eof . [ # ]
## Transitions:
## Reductions:
-- On #
--   accept prog_eof

State 253:
## Known stack suffix:
## prog
## LR(1) items:
prog_eof -> prog . EOF [ # ]
## Transitions:
-- On EOF shift to state 254
## Reductions:

State 254:
## Known stack suffix:
## prog EOF
## LR(1) items:
prog_eof -> prog EOF . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production prog_eof -> prog EOF

