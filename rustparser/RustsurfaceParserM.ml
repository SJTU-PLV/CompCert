
(* This file was auto-generated based on "RustsurfaceParserM.messages". *)

(* Please note that the function [message] can raise [Not_found]. *)

let message =
  fun s ->
    match s with
    | 249 ->
        "Ends in an error in state: 249.\nprog -> enum . [ EOF ]\nprog -> enum . prog [ EOF ]\nThe known suffix of the stack is as follows:\nenum\n"
    | 247 ->
        "Ends in an error in state: 247.\nprog -> enum_decl . [ EOF ]\nprog -> enum_decl . prog [ EOF ]\nThe known suffix of the stack is as follows:\nenum_decl\n"
    | 245 ->
        "Ends in an error in state: 245.\nprog -> fn . [ EOF ]\nprog -> fn . prog [ EOF ]\nThe known suffix of the stack is as follows:\nfn\n"
    | 243 ->
        "Ends in an error in state: 243.\nprog -> struct_ . [ EOF ]\nprog -> struct_ . prog [ EOF ]\nThe known suffix of the stack is as follows:\nstruct_\n"
    | 242 ->
        "Ends in an error in state: 242.\nprog -> struct_decl . [ EOF ]\nprog -> struct_decl . prog [ EOF ]\nThe known suffix of the stack is as follows:\nstruct_decl\n"
    | 238 ->
        "Ends in an error in state: 238.\nenum_fields -> ID COMMA . enum_fields [ RBRACE ]\nThe known suffix of the stack is as follows:\nID COMMA\n"
    | 236 ->
        "Ends in an error in state: 236.\nenum_fields -> ID LPAREN non_empty_ty_sequence RPAREN COMMA . enum_fields [ RBRACE ]\nThe known suffix of the stack is as follows:\nID LPAREN non_empty_ty_sequence RPAREN COMMA\n"
    | 235 ->
        "Ends in an error in state: 235.\nenum_fields -> ID LPAREN non_empty_ty_sequence RPAREN . [ RBRACE ]\nenum_fields -> ID LPAREN non_empty_ty_sequence RPAREN . COMMA enum_fields [ RBRACE ]\nThe known suffix of the stack is as follows:\nID LPAREN non_empty_ty_sequence RPAREN\n"
    | 232 ->
        "Ends in an error in state: 232.\nnon_empty_ty_sequence -> ty COMMA . non_empty_ty_sequence [ RPAREN ]\nThe known suffix of the stack is as follows:\nty COMMA\n"
    | 231 ->
        "Ends in an error in state: 231.\nnon_empty_ty_sequence -> ty . [ RPAREN ]\nnon_empty_ty_sequence -> ty . COMMA non_empty_ty_sequence [ RPAREN ]\nThe known suffix of the stack is as follows:\nty\n"
    | 230 ->
        "Ends in an error in state: 230.\nenum_fields -> ID LPAREN . non_empty_ty_sequence RPAREN [ RBRACE ]\nenum_fields -> ID LPAREN . non_empty_ty_sequence RPAREN COMMA enum_fields [ RBRACE ]\nThe known suffix of the stack is as follows:\nID LPAREN\n"
    | 229 ->
        "Ends in an error in state: 229.\nenum_fields -> ID . [ RBRACE ]\nenum_fields -> ID . COMMA enum_fields [ RBRACE ]\nenum_fields -> ID . LPAREN non_empty_ty_sequence RPAREN [ RBRACE ]\nenum_fields -> ID . LPAREN non_empty_ty_sequence RPAREN COMMA enum_fields [ RBRACE ]\nThe known suffix of the stack is as follows:\nID\n"
    | 228 ->
        "Ends in an error in state: 228.\nenum -> ENUM ID generic_origins origin_relations LBRACE . enum_fields RBRACE [ STRUCT FN EOF ENUM ]\nThe known suffix of the stack is as follows:\nENUM ID generic_origins origin_relations LBRACE\n"
    | 226 ->
        "Ends in an error in state: 226.\nenum -> ENUM ID generic_origins origin_relations . LBRACE enum_fields RBRACE [ STRUCT FN EOF ENUM ]\nenum_decl -> ENUM ID generic_origins origin_relations . SEMICOLON [ STRUCT FN EOF ENUM ]\nThe known suffix of the stack is as follows:\nENUM ID generic_origins origin_relations\nWARNING: This example involves spurious reductions.\nThis implies that, although the LR(1) items shown above provide an\naccurate view of the past (what has been recognized so far), they\nmay provide an INCOMPLETE view of the future (what was expected next).\nIn state 10, spurious reduction of production origin_relations_ ->\nIn state 16, spurious reduction of production origin_relations -> WHERE origin_relations_\n"
    | 225 ->
        "Ends in an error in state: 225.\nenum -> ENUM ID generic_origins . origin_relations LBRACE enum_fields RBRACE [ STRUCT FN EOF ENUM ]\nenum_decl -> ENUM ID generic_origins . origin_relations SEMICOLON [ STRUCT FN EOF ENUM ]\nThe known suffix of the stack is as follows:\nENUM ID generic_origins\n"
    | 224 ->
        "Ends in an error in state: 224.\nenum -> ENUM ID . generic_origins origin_relations LBRACE enum_fields RBRACE [ STRUCT FN EOF ENUM ]\nenum_decl -> ENUM ID . generic_origins origin_relations SEMICOLON [ STRUCT FN EOF ENUM ]\nThe known suffix of the stack is as follows:\nENUM ID\n"
    | 223 ->
        "Ends in an error in state: 223.\nenum -> ENUM . ID generic_origins origin_relations LBRACE enum_fields RBRACE [ STRUCT FN EOF ENUM ]\nenum_decl -> ENUM . ID generic_origins origin_relations SEMICOLON [ STRUCT FN EOF ENUM ]\nThe known suffix of the stack is as follows:\nENUM\n"
    | 220 ->
        "Ends in an error in state: 220.\nfn -> FN ID generic_origins LPAREN composite_fields RPAREN origin_relations LBRACE . stmt RBRACE [ STRUCT FN EOF ENUM ]\nThe known suffix of the stack is as follows:\nFN ID generic_origins LPAREN composite_fields RPAREN origin_relations LBRACE\n"
    | 219 ->
        "Ends in an error in state: 219.\nfn -> FN ID generic_origins LPAREN composite_fields RPAREN origin_relations . LBRACE stmt RBRACE [ STRUCT FN EOF ENUM ]\nThe known suffix of the stack is as follows:\nFN ID generic_origins LPAREN composite_fields RPAREN origin_relations\nWARNING: This example involves spurious reductions.\nThis implies that, although the LR(1) items shown above provide an\naccurate view of the past (what has been recognized so far), they\nmay provide an INCOMPLETE view of the future (what was expected next).\nIn state 10, spurious reduction of production origin_relations_ ->\nIn state 16, spurious reduction of production origin_relations -> WHERE origin_relations_\n"
    | 215 ->
        "Ends in an error in state: 215.\nstmt -> WHILE expr LBRACE stmt RBRACE . stmt [ RBRACE ]\nThe known suffix of the stack is as follows:\nWHILE expr LBRACE stmt RBRACE\n"
    | 212 ->
        "Ends in an error in state: 212.\nmatch_arms -> match_arm . [ RBRACE ]\nmatch_arms -> match_arm . match_arms [ RBRACE ]\nThe known suffix of the stack is as follows:\nmatch_arm\n"
    | 205 ->
        "Ends in an error in state: 205.\nargs_pattern -> pattern COMMA . args_pattern [ RPAREN ]\nThe known suffix of the stack is as follows:\npattern COMMA\n"
    | 204 ->
        "Ends in an error in state: 204.\nargs_pattern -> pattern . [ RPAREN ]\nargs_pattern -> pattern . COMMA args_pattern [ RPAREN ]\nThe known suffix of the stack is as follows:\npattern\nWARNING: This example involves spurious reductions.\nThis implies that, although the LR(1) items shown above provide an\naccurate view of the past (what has been recognized so far), they\nmay provide an INCOMPLETE view of the future (what was expected next).\nIn state 146, spurious reduction of production identifier_pattern -> ID\nIn state 206, spurious reduction of production pattern -> identifier_pattern\n"
    | 203 ->
        "Ends in an error in state: 203.\ntuple_struct_pattern -> path_expr LPAREN . args_pattern RPAREN [ RPAREN RARROWW COMMA ]\nThe known suffix of the stack is as follows:\npath_expr LPAREN\n"
    | 202 ->
        "Ends in an error in state: 202.\npath_pattern -> path_expr . [ RPAREN RARROWW COMMA ]\ntuple_struct_pattern -> path_expr . LPAREN args_pattern RPAREN [ RPAREN RARROWW COMMA ]\nThe known suffix of the stack is as follows:\npath_expr\n"
    | 197 ->
        "Ends in an error in state: 197.\nstmt -> LOOP LBRACE stmt RBRACE . stmt [ RBRACE ]\nThe known suffix of the stack is as follows:\nLOOP LBRACE stmt RBRACE\n"
    | 194 ->
        "Ends in an error in state: 194.\nstmt -> LBRACE stmt RBRACE . stmt [ RBRACE ]\nThe known suffix of the stack is as follows:\nLBRACE stmt RBRACE\n"
    | 190 ->
        "Ends in an error in state: 190.\nstmt -> IF expr LBRACE stmt RBRACE ELSE LBRACE stmt RBRACE . stmt [ RBRACE ]\nThe known suffix of the stack is as follows:\nIF expr LBRACE stmt RBRACE ELSE LBRACE stmt RBRACE\n"
    | 188 ->
        "Ends in an error in state: 188.\nstmt -> IF expr LBRACE stmt RBRACE ELSE LBRACE . stmt RBRACE stmt [ RBRACE ]\nThe known suffix of the stack is as follows:\nIF expr LBRACE stmt RBRACE ELSE LBRACE\n"
    | 187 ->
        "Ends in an error in state: 187.\nstmt -> IF expr LBRACE stmt RBRACE ELSE . LBRACE stmt RBRACE stmt [ RBRACE ]\nThe known suffix of the stack is as follows:\nIF expr LBRACE stmt RBRACE ELSE\n"
    | 186 ->
        "Ends in an error in state: 186.\nstmt -> IF expr LBRACE stmt RBRACE . ELSE LBRACE stmt RBRACE stmt [ RBRACE ]\nstmt -> IF expr LBRACE stmt RBRACE . stmt [ RBRACE ]\nThe known suffix of the stack is as follows:\nIF expr LBRACE stmt RBRACE\n"
    | 182 ->
        "Ends in an error in state: 182.\nstmt_item -> expr ASSIGN ID LBRACE . struct_fields RBRACE [ SEMICOLON RBRACE ]\nThe known suffix of the stack is as follows:\nexpr ASSIGN ID LBRACE\n"
    | 181 ->
        "Ends in an error in state: 181.\nexpr -> ID . [ SUBS SEMICOLON RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nexpr -> ID . COLON2 ID LPAREN expr RPAREN [ SUBS SEMICOLON RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\npath_expr -> ID . COLON2 ID [ SUBS SEMICOLON RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nstmt_item -> expr ASSIGN ID . LBRACE struct_fields RBRACE [ SEMICOLON RBRACE ]\nThe known suffix of the stack is as follows:\nexpr ASSIGN ID\n"
    | 180 ->
        "Ends in an error in state: 180.\nexpr -> expr ASSIGN . expr [ SUBS SEMICOLON RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nstmt_item -> expr ASSIGN . ID LBRACE struct_fields RBRACE [ SEMICOLON RBRACE ]\nThe known suffix of the stack is as follows:\nexpr ASSIGN\n"
    | 179 ->
        "Ends in an error in state: 179.\nexpr -> expr . DOT ID [ SUBS SEMICOLON RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nexpr -> expr . ASSIGN expr [ SUBS SEMICOLON RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nexpr -> expr . ADD expr [ SUBS SEMICOLON RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nexpr -> expr . SUBS expr [ SUBS SEMICOLON RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nexpr -> expr . ASTERISK expr [ SUBS SEMICOLON RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nexpr -> expr . DIV expr [ SUBS SEMICOLON RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nexpr -> expr . LE expr [ SUBS SEMICOLON RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nexpr -> expr . GE expr [ SUBS SEMICOLON RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nexpr -> expr . RANGLE expr [ SUBS SEMICOLON RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nexpr -> expr . LANGLE expr [ SUBS SEMICOLON RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nexpr -> expr . EQ expr [ SUBS SEMICOLON RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nexpr -> expr . NE expr [ SUBS SEMICOLON RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nexpr -> expr . OR expr [ SUBS SEMICOLON RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nexpr -> expr . AND expr [ SUBS SEMICOLON RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nexpr -> expr . LPAREN args_expr RPAREN [ SUBS SEMICOLON RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nstmt_item -> expr . [ SEMICOLON RBRACE ]\nstmt_item -> expr . ASSIGN ID LBRACE struct_fields RBRACE [ SEMICOLON RBRACE ]\nThe known suffix of the stack is as follows:\nexpr\n"
    | 177 ->
        "Ends in an error in state: 177.\nstmt -> stmt_item SEMICOLON . stmt [ RBRACE ]\nThe known suffix of the stack is as follows:\nstmt_item SEMICOLON\n"
    | 176 ->
        "Ends in an error in state: 176.\nstmt -> stmt_item . [ RBRACE ]\nstmt -> stmt_item . SEMICOLON stmt [ RBRACE ]\nThe known suffix of the stack is as follows:\nstmt_item\n"
    | 173 ->
        "Ends in an error in state: 173.\nstmt -> IF expr LBRACE . stmt RBRACE ELSE LBRACE stmt RBRACE stmt [ RBRACE ]\nstmt -> IF expr LBRACE . stmt RBRACE stmt [ RBRACE ]\nThe known suffix of the stack is as follows:\nIF expr LBRACE\n"
    | 172 ->
        "Ends in an error in state: 172.\nexpr -> expr . DOT ID [ SUBS RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nexpr -> expr . ASSIGN expr [ SUBS RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nexpr -> expr . ADD expr [ SUBS RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nexpr -> expr . SUBS expr [ SUBS RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nexpr -> expr . ASTERISK expr [ SUBS RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nexpr -> expr . DIV expr [ SUBS RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nexpr -> expr . LE expr [ SUBS RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nexpr -> expr . GE expr [ SUBS RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nexpr -> expr . RANGLE expr [ SUBS RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nexpr -> expr . LANGLE expr [ SUBS RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nexpr -> expr . EQ expr [ SUBS RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nexpr -> expr . NE expr [ SUBS RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nexpr -> expr . OR expr [ SUBS RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nexpr -> expr . AND expr [ SUBS RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nexpr -> expr . LPAREN args_expr RPAREN [ SUBS RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nstmt -> IF expr . LBRACE stmt RBRACE ELSE LBRACE stmt RBRACE stmt [ RBRACE ]\nstmt -> IF expr . LBRACE stmt RBRACE stmt [ RBRACE ]\nThe known suffix of the stack is as follows:\nIF expr\n"
    | 171 ->
        "Ends in an error in state: 171.\nstmt -> IF . expr LBRACE stmt RBRACE ELSE LBRACE stmt RBRACE stmt [ RBRACE ]\nstmt -> IF . expr LBRACE stmt RBRACE stmt [ RBRACE ]\nThe known suffix of the stack is as follows:\nIF\n"
    | 170 ->
        "Ends in an error in state: 170.\nstmt -> LBRACE . stmt RBRACE stmt [ RBRACE ]\nThe known suffix of the stack is as follows:\nLBRACE\n"
    | 169 ->
        "Ends in an error in state: 169.\nexpr -> expr . DOT ID [ SUBS SEMICOLON RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nexpr -> expr . ASSIGN expr [ SUBS SEMICOLON RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nexpr -> expr . ADD expr [ SUBS SEMICOLON RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nexpr -> expr . SUBS expr [ SUBS SEMICOLON RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nexpr -> expr . ASTERISK expr [ SUBS SEMICOLON RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nexpr -> expr . DIV expr [ SUBS SEMICOLON RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nexpr -> expr . LE expr [ SUBS SEMICOLON RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nexpr -> expr . GE expr [ SUBS SEMICOLON RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nexpr -> expr . RANGLE expr [ SUBS SEMICOLON RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nexpr -> expr . LANGLE expr [ SUBS SEMICOLON RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nexpr -> expr . EQ expr [ SUBS SEMICOLON RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nexpr -> expr . NE expr [ SUBS SEMICOLON RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nexpr -> expr . OR expr [ SUBS SEMICOLON RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nexpr -> expr . AND expr [ SUBS SEMICOLON RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nexpr -> expr . LPAREN args_expr RPAREN [ SUBS SEMICOLON RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nstmt_item -> LET ID COLON ty ASSIGN expr . [ SEMICOLON RBRACE ]\nThe known suffix of the stack is as follows:\nLET ID COLON ty ASSIGN expr\n"
    | 165 ->
        "Ends in an error in state: 165.\nstruct_fields -> ID COLON expr COMMA . struct_fields [ RBRACE ]\nThe known suffix of the stack is as follows:\nID COLON expr COMMA\n"
    | 164 ->
        "Ends in an error in state: 164.\nexpr -> expr . DOT ID [ SUBS RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . ASSIGN expr [ SUBS RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . ADD expr [ SUBS RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . SUBS expr [ SUBS RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . ASTERISK expr [ SUBS RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . DIV expr [ SUBS RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . LE expr [ SUBS RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . GE expr [ SUBS RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . RANGLE expr [ SUBS RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . LANGLE expr [ SUBS RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . EQ expr [ SUBS RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . NE expr [ SUBS RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . OR expr [ SUBS RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . AND expr [ SUBS RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . LPAREN args_expr RPAREN [ SUBS RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nstruct_fields -> ID COLON expr . [ RBRACE ]\nstruct_fields -> ID COLON expr . COMMA struct_fields [ RBRACE ]\nThe known suffix of the stack is as follows:\nID COLON expr\n"
    | 163 ->
        "Ends in an error in state: 163.\nstruct_fields -> ID COLON . expr [ RBRACE ]\nstruct_fields -> ID COLON . expr COMMA struct_fields [ RBRACE ]\nThe known suffix of the stack is as follows:\nID COLON\n"
    | 162 ->
        "Ends in an error in state: 162.\nstruct_fields -> ID . COLON expr [ RBRACE ]\nstruct_fields -> ID . COLON expr COMMA struct_fields [ RBRACE ]\nThe known suffix of the stack is as follows:\nID\n"
    | 161 ->
        "Ends in an error in state: 161.\nstmt_item -> LET ID COLON ty ASSIGN ID LBRACE . struct_fields RBRACE [ SEMICOLON RBRACE ]\nThe known suffix of the stack is as follows:\nLET ID COLON ty ASSIGN ID LBRACE\n"
    | 160 ->
        "Ends in an error in state: 160.\nexpr -> ID . [ SUBS SEMICOLON RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nexpr -> ID . COLON2 ID LPAREN expr RPAREN [ SUBS SEMICOLON RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\npath_expr -> ID . COLON2 ID [ SUBS SEMICOLON RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nstmt_item -> LET ID COLON ty ASSIGN ID . LBRACE struct_fields RBRACE [ SEMICOLON RBRACE ]\nThe known suffix of the stack is as follows:\nLET ID COLON ty ASSIGN ID\n"
    | 159 ->
        "Ends in an error in state: 159.\nstmt_item -> LET ID COLON ty ASSIGN . expr [ SEMICOLON RBRACE ]\nstmt_item -> LET ID COLON ty ASSIGN . ID LBRACE struct_fields RBRACE [ SEMICOLON RBRACE ]\nThe known suffix of the stack is as follows:\nLET ID COLON ty ASSIGN\n"
    | 158 ->
        "Ends in an error in state: 158.\nstmt_item -> LET ID COLON ty . [ SEMICOLON RBRACE ]\nstmt_item -> LET ID COLON ty . ASSIGN expr [ SEMICOLON RBRACE ]\nstmt_item -> LET ID COLON ty . ASSIGN ID LBRACE struct_fields RBRACE [ SEMICOLON RBRACE ]\nThe known suffix of the stack is as follows:\nLET ID COLON ty\n"
    | 157 ->
        "Ends in an error in state: 157.\nstmt_item -> LET ID COLON . ty [ SEMICOLON RBRACE ]\nstmt_item -> LET ID COLON . ty ASSIGN expr [ SEMICOLON RBRACE ]\nstmt_item -> LET ID COLON . ty ASSIGN ID LBRACE struct_fields RBRACE [ SEMICOLON RBRACE ]\nThe known suffix of the stack is as follows:\nLET ID COLON\n"
    | 156 ->
        "Ends in an error in state: 156.\nstmt_item -> LET ID . COLON ty [ SEMICOLON RBRACE ]\nstmt_item -> LET ID . COLON ty ASSIGN expr [ SEMICOLON RBRACE ]\nstmt_item -> LET ID . COLON ty ASSIGN ID LBRACE struct_fields RBRACE [ SEMICOLON RBRACE ]\nThe known suffix of the stack is as follows:\nLET ID\n"
    | 155 ->
        "Ends in an error in state: 155.\nstmt_item -> LET . ID COLON ty [ SEMICOLON RBRACE ]\nstmt_item -> LET . ID COLON ty ASSIGN expr [ SEMICOLON RBRACE ]\nstmt_item -> LET . ID COLON ty ASSIGN ID LBRACE struct_fields RBRACE [ SEMICOLON RBRACE ]\nThe known suffix of the stack is as follows:\nLET\n"
    | 154 ->
        "Ends in an error in state: 154.\nstmt -> LOOP LBRACE . stmt RBRACE stmt [ RBRACE ]\nThe known suffix of the stack is as follows:\nLOOP LBRACE\n"
    | 153 ->
        "Ends in an error in state: 153.\nstmt -> LOOP . LBRACE stmt RBRACE stmt [ RBRACE ]\nThe known suffix of the stack is as follows:\nLOOP\n"
    | 152 ->
        "Ends in an error in state: 152.\nmatch_arm -> pattern RARROWW LBRACE . stmt RBRACE [ RBRACE PREF ID ]\nThe known suffix of the stack is as follows:\npattern RARROWW LBRACE\n"
    | 151 ->
        "Ends in an error in state: 151.\nmatch_arm -> pattern RARROWW . LBRACE stmt RBRACE [ RBRACE PREF ID ]\nThe known suffix of the stack is as follows:\npattern RARROWW\n"
    | 150 ->
        "Ends in an error in state: 150.\nmatch_arm -> pattern . RARROWW LBRACE stmt RBRACE [ RBRACE PREF ID ]\nThe known suffix of the stack is as follows:\npattern\nWARNING: This example involves spurious reductions.\nThis implies that, although the LR(1) items shown above provide an\naccurate view of the past (what has been recognized so far), they\nmay provide an INCOMPLETE view of the future (what was expected next).\nIn state 146, spurious reduction of production identifier_pattern -> ID\nIn state 206, spurious reduction of production pattern -> identifier_pattern\n"
    | 147 ->
        "Ends in an error in state: 147.\npath_expr -> ID COLON2 . ID [ RPAREN RARROWW LPAREN COMMA ]\nThe known suffix of the stack is as follows:\nID COLON2\n"
    | 146 ->
        "Ends in an error in state: 146.\nidentifier_pattern -> ID . [ RPAREN RARROWW COMMA ]\npath_expr -> ID . COLON2 ID [ RPAREN RARROWW LPAREN COMMA ]\nThe known suffix of the stack is as follows:\nID\n"
    | 143 ->
        "Ends in an error in state: 143.\nidentifier_pattern -> PREF MUT . ID [ RPAREN RARROWW COMMA ]\nThe known suffix of the stack is as follows:\nPREF MUT\n"
    | 142 ->
        "Ends in an error in state: 142.\nidentifier_pattern -> PREF . MUT ID [ RPAREN RARROWW COMMA ]\nidentifier_pattern -> PREF . ID [ RPAREN RARROWW COMMA ]\nThe known suffix of the stack is as follows:\nPREF\n"
    | 141 ->
        "Ends in an error in state: 141.\nstmt_item -> MATCH expr LBRACE . match_arms RBRACE [ SEMICOLON RBRACE ]\nThe known suffix of the stack is as follows:\nMATCH expr LBRACE\n"
    | 140 ->
        "Ends in an error in state: 140.\nexpr -> expr . DOT ID [ SUBS RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nexpr -> expr . ASSIGN expr [ SUBS RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nexpr -> expr . ADD expr [ SUBS RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nexpr -> expr . SUBS expr [ SUBS RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nexpr -> expr . ASTERISK expr [ SUBS RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nexpr -> expr . DIV expr [ SUBS RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nexpr -> expr . LE expr [ SUBS RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nexpr -> expr . GE expr [ SUBS RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nexpr -> expr . RANGLE expr [ SUBS RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nexpr -> expr . LANGLE expr [ SUBS RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nexpr -> expr . EQ expr [ SUBS RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nexpr -> expr . NE expr [ SUBS RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nexpr -> expr . OR expr [ SUBS RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nexpr -> expr . AND expr [ SUBS RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nexpr -> expr . LPAREN args_expr RPAREN [ SUBS RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nstmt_item -> MATCH expr . LBRACE match_arms RBRACE [ SEMICOLON RBRACE ]\nThe known suffix of the stack is as follows:\nMATCH expr\n"
    | 139 ->
        "Ends in an error in state: 139.\nstmt_item -> MATCH . expr LBRACE match_arms RBRACE [ SEMICOLON RBRACE ]\nThe known suffix of the stack is as follows:\nMATCH\n"
    | 138 ->
        "Ends in an error in state: 138.\nexpr -> expr . DOT ID [ SUBS SEMICOLON RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nexpr -> expr . ASSIGN expr [ SUBS SEMICOLON RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nexpr -> expr . ADD expr [ SUBS SEMICOLON RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nexpr -> expr . SUBS expr [ SUBS SEMICOLON RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nexpr -> expr . ASTERISK expr [ SUBS SEMICOLON RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nexpr -> expr . DIV expr [ SUBS SEMICOLON RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nexpr -> expr . LE expr [ SUBS SEMICOLON RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nexpr -> expr . GE expr [ SUBS SEMICOLON RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nexpr -> expr . RANGLE expr [ SUBS SEMICOLON RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nexpr -> expr . LANGLE expr [ SUBS SEMICOLON RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nexpr -> expr . EQ expr [ SUBS SEMICOLON RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nexpr -> expr . NE expr [ SUBS SEMICOLON RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nexpr -> expr . OR expr [ SUBS SEMICOLON RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nexpr -> expr . AND expr [ SUBS SEMICOLON RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nexpr -> expr . LPAREN args_expr RPAREN [ SUBS SEMICOLON RBRACE RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nstmt_item -> RETURN expr . [ SEMICOLON RBRACE ]\nThe known suffix of the stack is as follows:\nRETURN expr\n"
    | 137 ->
        "Ends in an error in state: 137.\nstmt_item -> RETURN . [ SEMICOLON RBRACE ]\nstmt_item -> RETURN . expr [ SEMICOLON RBRACE ]\nThe known suffix of the stack is as follows:\nRETURN\n"
    | 136 ->
        "Ends in an error in state: 136.\nstmt -> WHILE expr LBRACE . stmt RBRACE stmt [ RBRACE ]\nThe known suffix of the stack is as follows:\nWHILE expr LBRACE\n"
    | 135 ->
        "Ends in an error in state: 135.\nexpr -> expr . DOT ID [ SUBS RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nexpr -> expr . ASSIGN expr [ SUBS RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nexpr -> expr . ADD expr [ SUBS RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nexpr -> expr . SUBS expr [ SUBS RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nexpr -> expr . ASTERISK expr [ SUBS RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nexpr -> expr . DIV expr [ SUBS RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nexpr -> expr . LE expr [ SUBS RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nexpr -> expr . GE expr [ SUBS RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nexpr -> expr . RANGLE expr [ SUBS RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nexpr -> expr . LANGLE expr [ SUBS RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nexpr -> expr . EQ expr [ SUBS RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nexpr -> expr . NE expr [ SUBS RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nexpr -> expr . OR expr [ SUBS RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nexpr -> expr . AND expr [ SUBS RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nexpr -> expr . LPAREN args_expr RPAREN [ SUBS RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nstmt -> WHILE expr . LBRACE stmt RBRACE stmt [ RBRACE ]\nThe known suffix of the stack is as follows:\nWHILE expr\n"
    | 134 ->
        "Ends in an error in state: 134.\nexpr -> expr . DOT ID [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . ASSIGN expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> SUBS expr . [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . ADD expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . SUBS expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . ASTERISK expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . DIV expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . LE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . GE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . RANGLE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . LANGLE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . EQ expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . NE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . OR expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . AND expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . LPAREN args_expr RPAREN [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nThe known suffix of the stack is as follows:\nSUBS expr\n"
    | 133 ->
        "Ends in an error in state: 133.\nexpr -> REF expr . [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . DOT ID [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . ASSIGN expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . ADD expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . SUBS expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . ASTERISK expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . DIV expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . LE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . GE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . RANGLE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . LANGLE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . EQ expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . NE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . OR expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . AND expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . LPAREN args_expr RPAREN [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nThe known suffix of the stack is as follows:\nREF expr\n"
    | 132 ->
        "Ends in an error in state: 132.\nexpr -> REF MUT expr . [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . DOT ID [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . ASSIGN expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . ADD expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . SUBS expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . ASTERISK expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . DIV expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . LE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . GE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . RANGLE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . LANGLE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . EQ expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . NE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . OR expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . AND expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . LPAREN args_expr RPAREN [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nThe known suffix of the stack is as follows:\nREF MUT expr\n"
    | 131 ->
        "Ends in an error in state: 131.\nexpr -> REF MUT . expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nThe known suffix of the stack is as follows:\nREF MUT\n"
    | 130 ->
        "Ends in an error in state: 130.\nexpr -> expr . DOT ID [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . ASSIGN expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> NOT expr . [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . ADD expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . SUBS expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . ASTERISK expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . DIV expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . LE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . GE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . RANGLE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . LANGLE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . EQ expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . NE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . OR expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . AND expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . LPAREN args_expr RPAREN [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nThe known suffix of the stack is as follows:\nNOT expr\n"
    | 128 ->
        "Ends in an error in state: 128.\nexpr -> LPAREN expr . RPAREN [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . DOT ID [ SUBS RPAREN RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nexpr -> expr . ASSIGN expr [ SUBS RPAREN RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nexpr -> expr . ADD expr [ SUBS RPAREN RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nexpr -> expr . SUBS expr [ SUBS RPAREN RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nexpr -> expr . ASTERISK expr [ SUBS RPAREN RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nexpr -> expr . DIV expr [ SUBS RPAREN RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nexpr -> expr . LE expr [ SUBS RPAREN RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nexpr -> expr . GE expr [ SUBS RPAREN RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nexpr -> expr . RANGLE expr [ SUBS RPAREN RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nexpr -> expr . LANGLE expr [ SUBS RPAREN RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nexpr -> expr . EQ expr [ SUBS RPAREN RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nexpr -> expr . NE expr [ SUBS RPAREN RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nexpr -> expr . OR expr [ SUBS RPAREN RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nexpr -> expr . AND expr [ SUBS RPAREN RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nexpr -> expr . LPAREN args_expr RPAREN [ SUBS RPAREN RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nThe known suffix of the stack is as follows:\nLPAREN expr\n"
    | 126 ->
        "Ends in an error in state: 126.\nexpr -> expr . DOT ID [ SUBS RPAREN RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nexpr -> expr . ASSIGN expr [ SUBS RPAREN RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nexpr -> ID COLON2 ID LPAREN expr . RPAREN [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . ADD expr [ SUBS RPAREN RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nexpr -> expr . SUBS expr [ SUBS RPAREN RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nexpr -> expr . ASTERISK expr [ SUBS RPAREN RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nexpr -> expr . DIV expr [ SUBS RPAREN RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nexpr -> expr . LE expr [ SUBS RPAREN RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nexpr -> expr . GE expr [ SUBS RPAREN RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nexpr -> expr . RANGLE expr [ SUBS RPAREN RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nexpr -> expr . LANGLE expr [ SUBS RPAREN RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nexpr -> expr . EQ expr [ SUBS RPAREN RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nexpr -> expr . NE expr [ SUBS RPAREN RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nexpr -> expr . OR expr [ SUBS RPAREN RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nexpr -> expr . AND expr [ SUBS RPAREN RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nexpr -> expr . LPAREN args_expr RPAREN [ SUBS RPAREN RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nThe known suffix of the stack is as follows:\nID COLON2 ID LPAREN expr\n"
    | 124 ->
        "Ends in an error in state: 124.\nexpr -> BOX LPAREN expr . RPAREN [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . DOT ID [ SUBS RPAREN RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nexpr -> expr . ASSIGN expr [ SUBS RPAREN RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nexpr -> expr . ADD expr [ SUBS RPAREN RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nexpr -> expr . SUBS expr [ SUBS RPAREN RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nexpr -> expr . ASTERISK expr [ SUBS RPAREN RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nexpr -> expr . DIV expr [ SUBS RPAREN RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nexpr -> expr . LE expr [ SUBS RPAREN RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nexpr -> expr . GE expr [ SUBS RPAREN RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nexpr -> expr . RANGLE expr [ SUBS RPAREN RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nexpr -> expr . LANGLE expr [ SUBS RPAREN RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nexpr -> expr . EQ expr [ SUBS RPAREN RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nexpr -> expr . NE expr [ SUBS RPAREN RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nexpr -> expr . OR expr [ SUBS RPAREN RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nexpr -> expr . AND expr [ SUBS RPAREN RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nexpr -> expr . LPAREN args_expr RPAREN [ SUBS RPAREN RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV ASTERISK ASSIGN AND ADD ]\nThe known suffix of the stack is as follows:\nBOX LPAREN expr\n"
    | 121 ->
        "Ends in an error in state: 121.\nexpr -> expr . DOT ID [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . ASSIGN expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . ADD expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . SUBS expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . ASTERISK expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . DIV expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . LE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . GE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . RANGLE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . LANGLE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . EQ expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . NE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . OR expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . AND expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr AND expr . [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . LPAREN args_expr RPAREN [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nThe known suffix of the stack is as follows:\nexpr AND expr\n"
    | 120 ->
        "Ends in an error in state: 120.\nexpr -> expr AND . expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nThe known suffix of the stack is as follows:\nexpr AND\n"
    | 119 ->
        "Ends in an error in state: 119.\nexpr -> expr . DOT ID [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . ASSIGN expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr ASSIGN expr . [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . ADD expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . SUBS expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . ASTERISK expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . DIV expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . LE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . GE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . RANGLE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . LANGLE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . EQ expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . NE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . OR expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . AND expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . LPAREN args_expr RPAREN [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nThe known suffix of the stack is as follows:\nexpr ASSIGN expr\n"
    | 118 ->
        "Ends in an error in state: 118.\nexpr -> expr ASSIGN . expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nThe known suffix of the stack is as follows:\nexpr ASSIGN\n"
    | 116 ->
        "Ends in an error in state: 116.\nargs_expr -> expr COMMA . args_expr [ RPAREN ]\nThe known suffix of the stack is as follows:\nexpr COMMA\n"
    | 115 ->
        "Ends in an error in state: 115.\nexpr -> expr . DOT ID [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . ASSIGN expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . ADD expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . SUBS expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . ASTERISK expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . DIV expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . LE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . GE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . RANGLE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . LANGLE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . EQ expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr EQ expr . [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . NE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . OR expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . AND expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . LPAREN args_expr RPAREN [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nThe known suffix of the stack is as follows:\nexpr EQ expr\n"
    | 114 ->
        "Ends in an error in state: 114.\nexpr -> expr EQ . expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nThe known suffix of the stack is as follows:\nexpr EQ\n"
    | 113 ->
        "Ends in an error in state: 113.\nexpr -> expr . DOT ID [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . ASSIGN expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . ADD expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . SUBS expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . ASTERISK expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . DIV expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . LE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . GE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr GE expr . [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . RANGLE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . LANGLE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . EQ expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . NE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . OR expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . AND expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . LPAREN args_expr RPAREN [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nThe known suffix of the stack is as follows:\nexpr GE expr\n"
    | 112 ->
        "Ends in an error in state: 112.\nexpr -> expr GE . expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nThe known suffix of the stack is as follows:\nexpr GE\n"
    | 111 ->
        "Ends in an error in state: 111.\nexpr -> expr . DOT ID [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . ASSIGN expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . ADD expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . SUBS expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . ASTERISK expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . DIV expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . LE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . GE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . RANGLE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . LANGLE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr LANGLE expr . [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . EQ expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . NE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . OR expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . AND expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . LPAREN args_expr RPAREN [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nThe known suffix of the stack is as follows:\nexpr LANGLE expr\n"
    | 110 ->
        "Ends in an error in state: 110.\nexpr -> expr LANGLE . expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nThe known suffix of the stack is as follows:\nexpr LANGLE\n"
    | 109 ->
        "Ends in an error in state: 109.\nexpr -> expr . DOT ID [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . ASSIGN expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . ADD expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . SUBS expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . ASTERISK expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . DIV expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . LE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr LE expr . [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . GE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . RANGLE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . LANGLE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . EQ expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . NE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . OR expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . AND expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . LPAREN args_expr RPAREN [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nThe known suffix of the stack is as follows:\nexpr LE expr\n"
    | 108 ->
        "Ends in an error in state: 108.\nexpr -> expr LE . expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nThe known suffix of the stack is as follows:\nexpr LE\n"
    | 107 ->
        "Ends in an error in state: 107.\nexpr -> expr . DOT ID [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . ASSIGN expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . ADD expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . SUBS expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . ASTERISK expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . DIV expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . LE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . GE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . RANGLE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . LANGLE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . EQ expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . NE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr NE expr . [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . OR expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . AND expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . LPAREN args_expr RPAREN [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nThe known suffix of the stack is as follows:\nexpr NE expr\n"
    | 106 ->
        "Ends in an error in state: 106.\nexpr -> expr NE . expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nThe known suffix of the stack is as follows:\nexpr NE\n"
    | 105 ->
        "Ends in an error in state: 105.\nexpr -> expr . DOT ID [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . ASSIGN expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . ADD expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . SUBS expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . ASTERISK expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . DIV expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . LE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . GE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . RANGLE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . LANGLE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . EQ expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . NE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . OR expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr OR expr . [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . AND expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . LPAREN args_expr RPAREN [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nThe known suffix of the stack is as follows:\nexpr OR expr\n"
    | 104 ->
        "Ends in an error in state: 104.\nexpr -> expr OR . expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nThe known suffix of the stack is as follows:\nexpr OR\n"
    | 103 ->
        "Ends in an error in state: 103.\nexpr -> expr . DOT ID [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . ASSIGN expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . ADD expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr ADD expr . [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . SUBS expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . ASTERISK expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . DIV expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . LE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . GE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . RANGLE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . LANGLE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . EQ expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . NE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . OR expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . AND expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . LPAREN args_expr RPAREN [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nThe known suffix of the stack is as follows:\nexpr ADD expr\n"
    | 102 ->
        "Ends in an error in state: 102.\nexpr -> expr ADD . expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nThe known suffix of the stack is as follows:\nexpr ADD\n"
    | 101 ->
        "Ends in an error in state: 101.\nexpr -> expr . DOT ID [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . ASSIGN expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . ADD expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . SUBS expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . ASTERISK expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . DIV expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . LE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . GE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . RANGLE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr RANGLE expr . [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . LANGLE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . EQ expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . NE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . OR expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . AND expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . LPAREN args_expr RPAREN [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nThe known suffix of the stack is as follows:\nexpr RANGLE expr\n"
    | 100 ->
        "Ends in an error in state: 100.\nexpr -> expr RANGLE . expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nThe known suffix of the stack is as follows:\nexpr RANGLE\n"
    | 99 ->
        "Ends in an error in state: 99.\nexpr -> expr . DOT ID [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . ASSIGN expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . ADD expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . SUBS expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . ASTERISK expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr ASTERISK expr . [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . DIV expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . LE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . GE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . RANGLE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . LANGLE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . EQ expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . NE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . OR expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . AND expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . LPAREN args_expr RPAREN [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nThe known suffix of the stack is as follows:\nexpr ASTERISK expr\n"
    | 98 ->
        "Ends in an error in state: 98.\nexpr -> expr ASTERISK . expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nThe known suffix of the stack is as follows:\nexpr ASTERISK\n"
    | 97 ->
        "Ends in an error in state: 97.\nexpr -> expr . DOT ID [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . ASSIGN expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . ADD expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . SUBS expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . ASTERISK expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . DIV expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr DIV expr . [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . LE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . GE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . RANGLE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . LANGLE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . EQ expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . NE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . OR expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . AND expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . LPAREN args_expr RPAREN [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nThe known suffix of the stack is as follows:\nexpr DIV expr\n"
    | 96 ->
        "Ends in an error in state: 96.\nexpr -> expr DIV . expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nThe known suffix of the stack is as follows:\nexpr DIV\n"
    | 94 ->
        "Ends in an error in state: 94.\nexpr -> expr DOT . ID [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nThe known suffix of the stack is as follows:\nexpr DOT\n"
    | 93 ->
        "Ends in an error in state: 93.\nexpr -> expr . DOT ID [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . ASSIGN expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . ADD expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . SUBS expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr SUBS expr . [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . ASTERISK expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . DIV expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . LE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . GE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . RANGLE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . LANGLE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . EQ expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . NE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . OR expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . AND expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . LPAREN args_expr RPAREN [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nThe known suffix of the stack is as follows:\nexpr SUBS expr\n"
    | 92 ->
        "Ends in an error in state: 92.\nexpr -> expr SUBS . expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nThe known suffix of the stack is as follows:\nexpr SUBS\n"
    | 91 ->
        "Ends in an error in state: 91.\nargs_expr -> expr . [ RPAREN ]\nargs_expr -> expr . COMMA args_expr [ RPAREN ]\nexpr -> expr . DOT ID [ SUBS RPAREN RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . ASSIGN expr [ SUBS RPAREN RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . ADD expr [ SUBS RPAREN RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . SUBS expr [ SUBS RPAREN RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . ASTERISK expr [ SUBS RPAREN RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . DIV expr [ SUBS RPAREN RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . LE expr [ SUBS RPAREN RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . GE expr [ SUBS RPAREN RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . RANGLE expr [ SUBS RPAREN RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . LANGLE expr [ SUBS RPAREN RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . EQ expr [ SUBS RPAREN RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . NE expr [ SUBS RPAREN RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . OR expr [ SUBS RPAREN RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . AND expr [ SUBS RPAREN RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . LPAREN args_expr RPAREN [ SUBS RPAREN RANGLE OR NE LPAREN LE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nThe known suffix of the stack is as follows:\nexpr\n"
    | 90 ->
        "Ends in an error in state: 90.\nexpr -> expr LPAREN . args_expr RPAREN [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nThe known suffix of the stack is as follows:\nexpr LPAREN\n"
    | 89 ->
        "Ends in an error in state: 89.\nexpr -> expr . DOT ID [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> ASTERISK expr . [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . ASSIGN expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . ADD expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . SUBS expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . ASTERISK expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . DIV expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . LE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . GE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . RANGLE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . LANGLE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . EQ expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . NE expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . OR expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . AND expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> expr . LPAREN args_expr RPAREN [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nThe known suffix of the stack is as follows:\nASTERISK expr\n"
    | 87 ->
        "Ends in an error in state: 87.\nexpr -> ASTERISK . expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nThe known suffix of the stack is as follows:\nASTERISK\n"
    | 86 ->
        "Ends in an error in state: 86.\nexpr -> BOX LPAREN . expr RPAREN [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nThe known suffix of the stack is as follows:\nBOX LPAREN\n"
    | 85 ->
        "Ends in an error in state: 85.\nexpr -> BOX . LPAREN expr RPAREN [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nThe known suffix of the stack is as follows:\nBOX\n"
    | 83 ->
        "Ends in an error in state: 83.\nexpr -> ID COLON2 ID LPAREN . expr RPAREN [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nThe known suffix of the stack is as follows:\nID COLON2 ID LPAREN\n"
    | 82 ->
        "Ends in an error in state: 82.\nexpr -> ID COLON2 ID . LPAREN expr RPAREN [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\npath_expr -> ID COLON2 ID . [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nThe known suffix of the stack is as follows:\nID COLON2 ID\n"
    | 81 ->
        "Ends in an error in state: 81.\nexpr -> ID COLON2 . ID LPAREN expr RPAREN [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\npath_expr -> ID COLON2 . ID [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nThe known suffix of the stack is as follows:\nID COLON2\n"
    | 80 ->
        "Ends in an error in state: 80.\nexpr -> ID . [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> ID . COLON2 ID LPAREN expr RPAREN [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\npath_expr -> ID . COLON2 ID [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nThe known suffix of the stack is as follows:\nID\n"
    | 77 ->
        "Ends in an error in state: 77.\nexpr -> LPAREN . expr RPAREN [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> LPAREN . RPAREN [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nThe known suffix of the stack is as follows:\nLPAREN\n"
    | 76 ->
        "Ends in an error in state: 76.\nexpr -> NOT . expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nThe known suffix of the stack is as follows:\nNOT\n"
    | 75 ->
        "Ends in an error in state: 75.\nexpr -> REF . MUT expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nexpr -> REF . expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nThe known suffix of the stack is as follows:\nREF\n"
    | 73 ->
        "Ends in an error in state: 73.\nexpr -> SUBS . expr [ SUBS SEMICOLON RPAREN RBRACE RANGLE OR NE LPAREN LE LBRACE LANGLE GE EQ DOT DIV COMMA ASTERISK ASSIGN AND ADD ]\nThe known suffix of the stack is as follows:\nSUBS\n"
    | 71 ->
        "Ends in an error in state: 71.\nstmt -> WHILE . expr LBRACE stmt RBRACE stmt [ RBRACE ]\nThe known suffix of the stack is as follows:\nWHILE\n"
    | 70 ->
        "Ends in an error in state: 70.\nfn -> FN ID generic_origins LPAREN composite_fields RPAREN RARROW ty origin_relations LBRACE . stmt RBRACE [ STRUCT FN EOF ENUM ]\nThe known suffix of the stack is as follows:\nFN ID generic_origins LPAREN composite_fields RPAREN RARROW ty origin_relations LBRACE\n"
    | 69 ->
        "Ends in an error in state: 69.\nfn -> FN ID generic_origins LPAREN composite_fields RPAREN RARROW ty origin_relations . LBRACE stmt RBRACE [ STRUCT FN EOF ENUM ]\nThe known suffix of the stack is as follows:\nFN ID generic_origins LPAREN composite_fields RPAREN RARROW ty origin_relations\nWARNING: This example involves spurious reductions.\nThis implies that, although the LR(1) items shown above provide an\naccurate view of the past (what has been recognized so far), they\nmay provide an INCOMPLETE view of the future (what was expected next).\nIn state 10, spurious reduction of production origin_relations_ ->\nIn state 16, spurious reduction of production origin_relations -> WHERE origin_relations_\n"
    | 68 ->
        "Ends in an error in state: 68.\nfn -> FN ID generic_origins LPAREN composite_fields RPAREN RARROW ty . origin_relations LBRACE stmt RBRACE [ STRUCT FN EOF ENUM ]\nThe known suffix of the stack is as follows:\nFN ID generic_origins LPAREN composite_fields RPAREN RARROW ty\n"
    | 67 ->
        "Ends in an error in state: 67.\nfn -> FN ID generic_origins LPAREN composite_fields RPAREN RARROW . ty origin_relations LBRACE stmt RBRACE [ STRUCT FN EOF ENUM ]\nThe known suffix of the stack is as follows:\nFN ID generic_origins LPAREN composite_fields RPAREN RARROW\n"
    | 66 ->
        "Ends in an error in state: 66.\nfn -> FN ID generic_origins LPAREN composite_fields RPAREN . origin_relations LBRACE stmt RBRACE [ STRUCT FN EOF ENUM ]\nfn -> FN ID generic_origins LPAREN composite_fields RPAREN . RARROW ty origin_relations LBRACE stmt RBRACE [ STRUCT FN EOF ENUM ]\nThe known suffix of the stack is as follows:\nFN ID generic_origins LPAREN composite_fields RPAREN\n"
    | 65 ->
        "Ends in an error in state: 65.\nfn -> FN ID generic_origins LPAREN composite_fields . RPAREN origin_relations LBRACE stmt RBRACE [ STRUCT FN EOF ENUM ]\nfn -> FN ID generic_origins LPAREN composite_fields . RPAREN RARROW ty origin_relations LBRACE stmt RBRACE [ STRUCT FN EOF ENUM ]\nThe known suffix of the stack is as follows:\nFN ID generic_origins LPAREN composite_fields\nWARNING: This example involves spurious reductions.\nThis implies that, although the LR(1) items shown above provide an\naccurate view of the past (what has been recognized so far), they\nmay provide an INCOMPLETE view of the future (what was expected next).\nIn state 56, spurious reduction of production composite_fields -> ID COLON ty\n"
    | 64 ->
        "Ends in an error in state: 64.\nfn -> FN ID generic_origins LPAREN . composite_fields RPAREN origin_relations LBRACE stmt RBRACE [ STRUCT FN EOF ENUM ]\nfn -> FN ID generic_origins LPAREN . composite_fields RPAREN RARROW ty origin_relations LBRACE stmt RBRACE [ STRUCT FN EOF ENUM ]\nThe known suffix of the stack is as follows:\nFN ID generic_origins LPAREN\n"
    | 63 ->
        "Ends in an error in state: 63.\nfn -> FN ID generic_origins . LPAREN composite_fields RPAREN origin_relations LBRACE stmt RBRACE [ STRUCT FN EOF ENUM ]\nfn -> FN ID generic_origins . LPAREN composite_fields RPAREN RARROW ty origin_relations LBRACE stmt RBRACE [ STRUCT FN EOF ENUM ]\nThe known suffix of the stack is as follows:\nFN ID generic_origins\n"
    | 62 ->
        "Ends in an error in state: 62.\nfn -> FN ID . generic_origins LPAREN composite_fields RPAREN origin_relations LBRACE stmt RBRACE [ STRUCT FN EOF ENUM ]\nfn -> FN ID . generic_origins LPAREN composite_fields RPAREN RARROW ty origin_relations LBRACE stmt RBRACE [ STRUCT FN EOF ENUM ]\nThe known suffix of the stack is as follows:\nFN ID\n"
    | 61 ->
        "Ends in an error in state: 61.\nfn -> FN . ID generic_origins LPAREN composite_fields RPAREN origin_relations LBRACE stmt RBRACE [ STRUCT FN EOF ENUM ]\nfn -> FN . ID generic_origins LPAREN composite_fields RPAREN RARROW ty origin_relations LBRACE stmt RBRACE [ STRUCT FN EOF ENUM ]\nThe known suffix of the stack is as follows:\nFN\n"
    | 59 ->
        "Ends in an error in state: 59.\nstruct_ -> STRUCT ID generic_origins origin_relations LBRACE composite_fields . RBRACE [ STRUCT FN EOF ENUM ]\nThe known suffix of the stack is as follows:\nSTRUCT ID generic_origins origin_relations LBRACE composite_fields\nWARNING: This example involves spurious reductions.\nThis implies that, although the LR(1) items shown above provide an\naccurate view of the past (what has been recognized so far), they\nmay provide an INCOMPLETE view of the future (what was expected next).\nIn state 56, spurious reduction of production composite_fields -> ID COLON ty\n"
    | 57 ->
        "Ends in an error in state: 57.\ncomposite_fields -> ID COLON ty COMMA . composite_fields [ RPAREN RBRACE ]\nThe known suffix of the stack is as follows:\nID COLON ty COMMA\n"
    | 56 ->
        "Ends in an error in state: 56.\ncomposite_fields -> ID COLON ty . [ RPAREN RBRACE ]\ncomposite_fields -> ID COLON ty . COMMA composite_fields [ RPAREN RBRACE ]\nThe known suffix of the stack is as follows:\nID COLON ty\n"
    | 52 ->
        "Ends in an error in state: 52.\nty -> FN generic_origins LPAREN params_ty RPAREN RARROW ty . origin_relations [ WHERE SEMICOLON RPAREN RBRACE RANGLE LBRACE COMMA ASSIGN ]\nThe known suffix of the stack is as follows:\nFN generic_origins LPAREN params_ty RPAREN RARROW ty\n"
    | 51 ->
        "Ends in an error in state: 51.\nty -> FN generic_origins LPAREN params_ty RPAREN RARROW . ty origin_relations [ WHERE SEMICOLON RPAREN RBRACE RANGLE LBRACE COMMA ASSIGN ]\nThe known suffix of the stack is as follows:\nFN generic_origins LPAREN params_ty RPAREN RARROW\n"
    | 50 ->
        "Ends in an error in state: 50.\nty -> FN generic_origins LPAREN params_ty RPAREN . RARROW ty origin_relations [ WHERE SEMICOLON RPAREN RBRACE RANGLE LBRACE COMMA ASSIGN ]\nThe known suffix of the stack is as follows:\nFN generic_origins LPAREN params_ty RPAREN\n"
    | 47 ->
        "Ends in an error in state: 47.\nparams_ty -> ty COMMA . params_ty [ RPAREN ]\nThe known suffix of the stack is as follows:\nty COMMA\n"
    | 46 ->
        "Ends in an error in state: 46.\nparams_ty -> ty . [ RPAREN ]\nparams_ty -> ty . COMMA params_ty [ RPAREN ]\nThe known suffix of the stack is as follows:\nty\n"
    | 44 ->
        "Ends in an error in state: 44.\nty -> BOX LANGLE ty . RANGLE [ WHERE SEMICOLON RPAREN RBRACE RANGLE LBRACE COMMA ASSIGN ]\nThe known suffix of the stack is as follows:\nBOX LANGLE ty\n"
    | 42 ->
        "Ends in an error in state: 42.\nty -> BOX LANGLE . ty RANGLE [ WHERE SEMICOLON RPAREN RBRACE RANGLE LBRACE COMMA ASSIGN ]\nThe known suffix of the stack is as follows:\nBOX LANGLE\n"
    | 41 ->
        "Ends in an error in state: 41.\nty -> BOX . LANGLE ty RANGLE [ WHERE SEMICOLON RPAREN RBRACE RANGLE LBRACE COMMA ASSIGN ]\nThe known suffix of the stack is as follows:\nBOX\n"
    | 38 ->
        "Ends in an error in state: 38.\nty -> FN generic_origins LPAREN . params_ty RPAREN RARROW ty origin_relations [ WHERE SEMICOLON RPAREN RBRACE RANGLE LBRACE COMMA ASSIGN ]\nThe known suffix of the stack is as follows:\nFN generic_origins LPAREN\n"
    | 37 ->
        "Ends in an error in state: 37.\nty -> FN generic_origins . LPAREN params_ty RPAREN RARROW ty origin_relations [ WHERE SEMICOLON RPAREN RBRACE RANGLE LBRACE COMMA ASSIGN ]\nThe known suffix of the stack is as follows:\nFN generic_origins\n"
    | 36 ->
        "Ends in an error in state: 36.\nty -> FN . generic_origins LPAREN params_ty RPAREN RARROW ty origin_relations [ WHERE SEMICOLON RPAREN RBRACE RANGLE LBRACE COMMA ASSIGN ]\nThe known suffix of the stack is as follows:\nFN\n"
    | 34 ->
        "Ends in an error in state: 34.\nty -> ID . generic_origins [ WHERE SEMICOLON RPAREN RBRACE RANGLE LBRACE COMMA ASSIGN ]\nThe known suffix of the stack is as follows:\nID\n"
    | 29 ->
        "Ends in an error in state: 29.\nty -> LPAREN . RPAREN [ WHERE SEMICOLON RPAREN RBRACE RANGLE LBRACE COMMA ASSIGN ]\nThe known suffix of the stack is as follows:\nLPAREN\n"
    | 28 ->
        "Ends in an error in state: 28.\nty -> REF origin_opt MUT . ty [ WHERE SEMICOLON RPAREN RBRACE RANGLE LBRACE COMMA ASSIGN ]\nThe known suffix of the stack is as follows:\nREF origin_opt MUT\n"
    | 27 ->
        "Ends in an error in state: 27.\nty -> REF origin_opt . MUT ty [ WHERE SEMICOLON RPAREN RBRACE RANGLE LBRACE COMMA ASSIGN ]\nty -> REF origin_opt . ty [ WHERE SEMICOLON RPAREN RBRACE RANGLE LBRACE COMMA ASSIGN ]\nThe known suffix of the stack is as follows:\nREF origin_opt\n"
    | 25 ->
        "Ends in an error in state: 25.\nty -> REF . origin_opt MUT ty [ WHERE SEMICOLON RPAREN RBRACE RANGLE LBRACE COMMA ASSIGN ]\nty -> REF . origin_opt ty [ WHERE SEMICOLON RPAREN RBRACE RANGLE LBRACE COMMA ASSIGN ]\nThe known suffix of the stack is as follows:\nREF\n"
    | 21 ->
        "Ends in an error in state: 21.\ncomposite_fields -> ID COLON . ty [ RPAREN RBRACE ]\ncomposite_fields -> ID COLON . ty COMMA composite_fields [ RPAREN RBRACE ]\nThe known suffix of the stack is as follows:\nID COLON\n"
    | 20 ->
        "Ends in an error in state: 20.\ncomposite_fields -> ID . COLON ty [ RPAREN RBRACE ]\ncomposite_fields -> ID . COLON ty COMMA composite_fields [ RPAREN RBRACE ]\nThe known suffix of the stack is as follows:\nID\n"
    | 19 ->
        "Ends in an error in state: 19.\nstruct_ -> STRUCT ID generic_origins origin_relations LBRACE . composite_fields RBRACE [ STRUCT FN EOF ENUM ]\nThe known suffix of the stack is as follows:\nSTRUCT ID generic_origins origin_relations LBRACE\n"
    | 17 ->
        "Ends in an error in state: 17.\nstruct_ -> STRUCT ID generic_origins origin_relations . LBRACE composite_fields RBRACE [ STRUCT FN EOF ENUM ]\nstruct_decl -> STRUCT ID generic_origins origin_relations . SEMICOLON [ STRUCT FN EOF ENUM ]\nThe known suffix of the stack is as follows:\nSTRUCT ID generic_origins origin_relations\nWARNING: This example involves spurious reductions.\nThis implies that, although the LR(1) items shown above provide an\naccurate view of the past (what has been recognized so far), they\nmay provide an INCOMPLETE view of the future (what was expected next).\nIn state 10, spurious reduction of production origin_relations_ ->\nIn state 16, spurious reduction of production origin_relations -> WHERE origin_relations_\n"
    | 14 ->
        "Ends in an error in state: 14.\norigin_relations_ -> ORIGIN COLON ORIGIN COMMA . origin_relations_ [ WHERE SEMICOLON RPAREN RBRACE RANGLE LBRACE COMMA ASSIGN ]\nThe known suffix of the stack is as follows:\nORIGIN COLON ORIGIN COMMA\n"
    | 13 ->
        "Ends in an error in state: 13.\norigin_relations_ -> ORIGIN COLON ORIGIN . [ WHERE SEMICOLON RPAREN RBRACE RANGLE LBRACE COMMA ASSIGN ]\norigin_relations_ -> ORIGIN COLON ORIGIN . COMMA origin_relations_ [ WHERE SEMICOLON RPAREN RBRACE RANGLE LBRACE COMMA ASSIGN ]\nThe known suffix of the stack is as follows:\nORIGIN COLON ORIGIN\n"
    | 12 ->
        "Ends in an error in state: 12.\norigin_relations_ -> ORIGIN COLON . ORIGIN [ WHERE SEMICOLON RPAREN RBRACE RANGLE LBRACE COMMA ASSIGN ]\norigin_relations_ -> ORIGIN COLON . ORIGIN COMMA origin_relations_ [ WHERE SEMICOLON RPAREN RBRACE RANGLE LBRACE COMMA ASSIGN ]\nThe known suffix of the stack is as follows:\nORIGIN COLON\n"
    | 11 ->
        "Ends in an error in state: 11.\norigin_relations_ -> ORIGIN . COLON ORIGIN [ WHERE SEMICOLON RPAREN RBRACE RANGLE LBRACE COMMA ASSIGN ]\norigin_relations_ -> ORIGIN . COLON ORIGIN COMMA origin_relations_ [ WHERE SEMICOLON RPAREN RBRACE RANGLE LBRACE COMMA ASSIGN ]\nThe known suffix of the stack is as follows:\nORIGIN\n"
    | 10 ->
        "Ends in an error in state: 10.\norigin_relations -> WHERE . origin_relations_ [ WHERE SEMICOLON RPAREN RBRACE RANGLE LBRACE COMMA ASSIGN ]\nThe known suffix of the stack is as follows:\nWHERE\n"
    | 9 ->
        "Ends in an error in state: 9.\nstruct_ -> STRUCT ID generic_origins . origin_relations LBRACE composite_fields RBRACE [ STRUCT FN EOF ENUM ]\nstruct_decl -> STRUCT ID generic_origins . origin_relations SEMICOLON [ STRUCT FN EOF ENUM ]\nThe known suffix of the stack is as follows:\nSTRUCT ID generic_origins\n"
    | 5 ->
        "Ends in an error in state: 5.\ngeneric_origins_ -> ORIGIN COMMA . generic_origins_ [ RANGLE ]\nThe known suffix of the stack is as follows:\nORIGIN COMMA\n"
    | 4 ->
        "Ends in an error in state: 4.\ngeneric_origins_ -> ORIGIN . [ RANGLE ]\ngeneric_origins_ -> ORIGIN . COMMA generic_origins_ [ RANGLE ]\nThe known suffix of the stack is as follows:\nORIGIN\n"
    | 3 ->
        "Ends in an error in state: 3.\ngeneric_origins -> LANGLE . generic_origins_ RANGLE [ WHERE SEMICOLON RPAREN RBRACE RANGLE LPAREN LBRACE COMMA ASSIGN ]\nThe known suffix of the stack is as follows:\nLANGLE\n"
    | 2 ->
        "Ends in an error in state: 2.\nstruct_ -> STRUCT ID . generic_origins origin_relations LBRACE composite_fields RBRACE [ STRUCT FN EOF ENUM ]\nstruct_decl -> STRUCT ID . generic_origins origin_relations SEMICOLON [ STRUCT FN EOF ENUM ]\nThe known suffix of the stack is as follows:\nSTRUCT ID\n"
    | 1 ->
        "Ends in an error in state: 1.\nstruct_ -> STRUCT . ID generic_origins origin_relations LBRACE composite_fields RBRACE [ STRUCT FN EOF ENUM ]\nstruct_decl -> STRUCT . ID generic_origins origin_relations SEMICOLON [ STRUCT FN EOF ENUM ]\nThe known suffix of the stack is as follows:\nSTRUCT\n"
    | 0 ->
        "Ends in an error in state: 0.\nprog_eof' -> . prog_eof [ # ]\nThe known suffix of the stack is as follows:\n"
    | _ ->
        raise Not_found
